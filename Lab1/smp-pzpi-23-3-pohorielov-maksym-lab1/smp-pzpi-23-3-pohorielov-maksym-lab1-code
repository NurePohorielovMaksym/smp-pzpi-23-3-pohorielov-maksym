#!/bin/bash

VERSION="1.0"
QUIET=0

show_help() {
  echo "Синтаксис:"
  echo "  task2 [--help | --version]"
  echo "  task2 [-q|--quiet] [академ_група] [файл.csv]"
}

show_version() {
  echo "task2 версія $VERSION"
}

while [[ "$1" =~ ^- ]]; do
  case "$1" in
    --help) show_help; exit 0 ;;
    --version) show_version; exit 0 ;;
    -q|--quiet) QUIET=1; shift ;;
    *) echo "Невідома опція: $1" >&2; exit 1 ;;
  esac
done

group_input="$1"
csv_path="$2"

if [[ -z "$csv_path" ]]; then
  files=($(ls TimeTable_??_??_20??.csv 2>/dev/null | sort))
  if [[ ${#files[@]} -eq 0 ]]; then
    echo "Не знайдено CSV файлів за шаблоном TimeTable_??_??_20??.csv" >&2
    exit 1
  fi
  echo "Оберіть файл:"
  PS3="Введіть номер файлу: "
  select csv_path in "${files[@]}"; do
    [[ -n "$csv_path" ]] && break
    echo "Неправильний вибір, спробуйте ще." >&2
  done
fi

if [[ ! -f "$csv_path" || ! -r "$csv_path" ]]; then
  echo "Файл '$csv_path' не існує або недоступний для читання." >&2
  exit 1
fi

available_groups=$(iconv -f windows-1251 -t utf-8 "$csv_path" | \
  sed 's/\r\n/\n/g; s/\r/\n/g; s/^\xEF\xBB\xBF//' | \
  sed 's/"//g' | \
  awk -F',' 'NR > 1 && $1 ~ / - / { split($1, x, " - "); gsub(/^ +| +$/, "", x[1]); if (x[1] != "") print x[1] }' | sort -Vu)

if [[ -z "$available_groups" ]]; then
  echo "У файлі '$csv_path' не знайдено жодної академічної групи." >&2
  exit 1
fi

group_count=$(echo "$available_groups" | wc -l)
if [[ -z "$group_input" && $group_count -eq 1 ]]; then
  selected_group="$available_groups"
elif [[ -z "$group_input" ]]; then
  PS3="Оберіть групу: "
  select selected_group in $available_groups; do
    [[ -n "$selected_group" ]] && break
    echo "Неправильний вибір, спробуйте ще." >&2
  done
else
  selected_group="$group_input"
  if ! echo "$available_groups" | grep -Fx "$selected_group" >/dev/null; then
    echo "Група '$selected_group' не знайдена у файлі '$csv_path'." >&2
    echo "Доступні групи:" >&2
    echo "$available_groups" >&2
    exit 1
  fi
fi

date_part=$(basename "$csv_path" .csv | sed -n 's/TimeTable_\(.*\)/\1/p')
result_file="Google_TimeTable_${date_part}.csv"
error_file="Google_TimeTable_${date_part}_errors.txt"

file_date=$(echo "$date_part" | sed 's/\([0-9]\{2\}\)_\([0-9]\{2\}\)_\([0-9]\{4\}\)/\2\/\1\/\3/')
default_date=${file_date:-"06/02/2025"}

echo "\"Subject\",\"Start Date\",\"Start Time\",\"End Date\",\"End Time\",\"Description\"" > "$result_file"
> "$error_file" 

iconv -f windows-1251 -t utf-8 "$csv_path" | \
  sed 's/\r\n/\n/g; s/\r/\n/g; s/^\xEF\xBB\xBF//' | \
  sed 's/"//g' | \
if [[ $? -ne 0 ]]; then
  echo "Помилка під час обробки файлу '$csv_path'." >&2
  echo "Деталі помилок записано у '$error_file'." >&2
  exit 1
fi
iconv -f windows-1251 -t utf-8 "$csv_path" | \
  sed 's/\r\n/\n/g; s/\r/\n/g; s/^\xEF\xBB\xBF//' | \
  sed 's/"//g' | \
awk -F ',' -v group="$selected_group" -v default_date="$default_date" -v OFS=',' '
function trim(s) {
  sub(/^ +/, "", s)
  sub(/ +$/, "", s)
  return s
}
BEGIN {
  PROCINFO["sorted_in"] = "@ind_str_asc"
}
NR > 1 {
  date_field_idx = 0
  for (i = 2; i <= NF; i++) {
    if ($i ~ /^[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}$/) {
      date_field_idx = i
      break
    }
  }
  if (date_field_idx == 0) next

  subj = $1
  for (j = 2; j < date_field_idx; j++) {
    subj = subj "," $j
  }
  subj = trim(subj)

  if (subj !~ group " - ") next
  split(subj, a, group " - ")
  if (length(a) < 2) next
  topic = trim(a[2])
  if (topic == "") next

  if (NF < date_field_idx + 2) next

  date = $(date_field_idx)
  time = $(date_field_idx + 1)

  if (date !~ /^[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}$/ && time ~ /^[0-2][0-9]:[0-5][0-9]/) {
    date = default_date
  } else if (date !~ /^[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}$/ || time !~ /^[0-2][0-9]:[0-5][0-9]/) {
    next
  }

  split(date, d, ".")
  day = d[1] + 0
  m = d[2] + 0
  y = d[3] + 0
  date_out = sprintf("%02d/%02d/%04d", m, day, y)

  topic_lc = tolower(topic)
  if (topic_lc ~ /лаб|лб/) {
    class_type = "lab"
    duration_min = 180  
  } else if (topic_lc ~ /пз|прпа/) {
    class_type = "prac"
    duration_min = 90   
  } else if (topic_lc ~ /лек|лекц/) {
    class_type = "lec"
    duration_min = 90 
  } else {
    class_type = "lec"
    duration_min = 90
  }


  gsub(/;? *№[0-9]+/, "", topic)

  base_key = topic "|" class_type

  split(time, t, ":")
  sh = t[1] + 0
  sm = t[2]

  ampm = (sh >= 12) ? "PM" : "AM"
  sh12 = (sh % 12 == 0) ? 12 : sh % 12
  stime = sprintf("%02d:%02d %s", sh12, sm, ampm)

  start_minutes = sh * 60 + sm
  end_minutes = start_minutes + duration_min
  eh = int(end_minutes / 60)
  em = end_minutes % 60

  eampm = (eh >= 12) ? "PM" : "AM"
  eh12 = (eh % 12 == 0) ? 12 : eh % 12
  etime = sprintf("%02d:%02d %s", eh12, em, eampm)

  sort_key = sprintf("%04d%02d%02d_%02d%02d_%d", y, m, day, sh, sm, NR)
  result[sort_key] = base_key "|" "\"" topic "\",\"" date_out "\",\"" stime "\",\"" date_out "\",\"" etime "\",\"" subj "\""
}

END {
  n = 0
  for (k in result) {
    n++
    keys[n] = k
  }
  asort(keys)

  for (i = 1; i <= n; i++) {
    k = keys[i]
    line = result[k]

    split(line, parts, "|")
    base_key = parts[1]
    class_type = parts[2]
    data = substr(line, length(base_key) + length(class_type) + 3)

    if (!(base_key in count_map)) {
      count_map[base_key] = 0
      lab_pair_state[base_key] = 0
    }

    if (class_type == "lab") {
      if (lab_pair_state[base_key] == 1) {
        lesson_num = count_map[base_key]
        lab_pair_state[base_key] = 2
      } else {
        count_map[base_key]++
        lesson_num = count_map[base_key]
        lab_pair_state[base_key] = 1
      }
    } else {
      count_map[base_key]++
      lesson_num = count_map[base_key]
      lab_pair_state[base_key] = 0
    }

    match(data, /^"[^"]+"/)
    topic_text = substr(data, RSTART + 1, RLENGTH - 2)
    gsub(/;? *№[0-9]+/, "", topic_text)
    new_topic = topic_text " №" lesson_num
    updated_data = "\"" new_topic "\"" substr(data, RSTART + RLENGTH)
    sub(/, *"[^"]+"$/, ",\"" new_topic "\"", updated_data)

    print updated_data
  }
}
' >> "$result_file"

if [[ $? -ne 0 ]]; then
  echo "Помилка під час обробки файлу '$csv_path'." >&2
  echo "Деталі помилок записано у '$error_file'." >&2
  exit 1
fi

if [[ ! -s "$result_file" || $(wc -l < "$result_file") -eq 1 ]]; then
  echo "Не знайдено занять для групи '$selected_group' у файлі '$csv_path'." >> "$error_file"
  echo "Не знайдено занять для групи '$selected_group' у файлі '$csv_path'." >&2
  rm -f "$result_file"
  exit 1
fi

if [[ "$QUIET" -ne 1 ]]; then
  echo "Успішно створено файл: $result_file"
  if [[ -s "$error_file" ]]; then
    echo "Знайдено помилки при обробці, деталі у '$error_file'."
  fi
fi
