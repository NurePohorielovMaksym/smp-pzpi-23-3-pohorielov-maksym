МІНІСТЕРСТВО НАУКИ І ОСВІТИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










Кафедра «Програмна інженерія»








ЗВІТ
з лабораторної роботи №4
з дисципліни «Скриптові мови програмування»
на тему: «СТРУКТУРУВАННЯ КОДУ, РОБОТА 3 ФОРМАМИ, АВТЕНТИФІКАЦІЯ ТА АВТОРИЗАЦІЯ»












 
Виконав:                                                                         Прийняв:
ст. гр. ПЗПІ-23-3                                                            ст. викладач кафедри ПІ
Погорєлов М. І.                                                              Сокорчук Ігор Петрович


















Харків 2025


1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	29.04.2025
	0.1
	Створено розділ «Завдання»
	2
	30.04.2025
	0.1
	Створено розділ «Опис Виконаної роботи»
	3
	30.04.2025
	0.1
	Створено розділ «Висновки»
	4
	30.04.2025
	0.1
	Створено розділ «Додаток А»
	5
	30.04.2025
	0.1
	Створено розділ «Додаток Б»
	6
	30.04.2025
	0.1
	Створено розділ «Додаток В»
	































































2 ЗАВДАННЯ
У даній лабораторній роботі необхідно реалізувати структурування коду вебзастосунку, а також додати функціональність автентифікації та авторизації користувачів. Перш за все потрібно усунути дублювання коду шапки та підвалу сайту. Для цього HTML-код шапки та підвалу виноситься в окремі шаблонні файли, які підключаються до кожної сторінки через механізми include або require_once. Це дозволяє спростити підтримку та оновлення структури сайту.
Далі необхідно створити сторінку входу для користувача, де реалізовується форма логіна з перевіркою правильності введених облікових даних. У разі успішного входу ім’я користувача зберігається в сесії, що дозволяє відслідковувати авторизацію на наступних сторінках сайту.
Для захисту контенту від неавторизованого доступу потрібно реалізувати перевірку сесії на сторінках, доступних лише зареєстрованим користувачам. Якщо користувач не пройшов автентифікацію, йому має відображатися повідомлення про необхідність входу в систему або перенаправлення на сторінку входу.
Також реалізовується сторінка профілю користувача, де відображається його ім’я та надається можливість завантаження аватара. Завантажене зображення зберігається на сервері, і відображається на сторінці профілю після оновлення.
Завершальним етапом є підтримка повноцінної роботи сесії користувача між сторінками, а також створення функціоналу виходу з облікового запису з повним очищенням сесії. Таким чином, вебзастосунок набуває ознак багатофункціональної системи з належною структурою та обмеженим доступом на основі автентифікації.




























3 ОПИС ВИКОНАНОЇ РОБОТИ


3.1 Опис інженерних рішень
У роботі було застосовано інженерні рішення, спрямовані на підвищення масштабованості, безпеки та зручності підтримки веб-додатку. По-перше, структура коду була організована таким чином, щоб уникнути дублювання заголовків і підвалів сайту — для цього було використано окремі шаблони header.phtml та footer.phtml. Це дозволяє централізовано управляти загальним виглядом сайту та зменшує ризик помилок при внесенні змін.
По-друге, реалізовано систему автентифікації та авторизації, що захищає доступ до окремих сторінок сайту. Користувачі без авторизації не можуть переглядати захищені сторінки, а на головній сторінці для них виводиться відповідне повідомлення з проханням увійти. Такий підхід забезпечує конфіденційність даних та дозволяє розмежовувати права доступу до функціоналу.
Для роботи з сесіями застосовано механізм контролю початку сесії за допомогою перевірки session_status(), що запобігає помилкам, пов’язаним із повторним запуском сесії. Крім того, для уникнення помилок із заголовками було дотримано послідовності викликів header() до початку будь-якого виводу, а також забезпечено правильне кодування файлів без зайвих пробілів і BOM, що є критичним для коректної роботи HTTP-заголовків.
Обробка форм здійснюється через метод POST із перевіркою коректності введених даних. Валідація кількості вибраних товарів гарантує, що в кошик потрапляють лише валідні позиції, що підвищує надійність та стабільність роботи магазину. Після успішного додавання товарів користувач перенаправляється на сторінку кошика, що покращує UX.
Загалом, застосовані інженерні рішення відповідають кращим практикам розробки веб-застосунків на PHP, забезпечують безперебійну роботу, підтримку і масштабованість проекту. Вони також закладають міцний фундамент для подальшого розвитку функціоналу і інтеграції нових можливостей.


3.2 Розробка скрипта


3.2.3 Файл products_data.php
Файл products_data.php містить асоціативний масив $products, який зберігає дані про товари, доступні в магазині. Кожен товар представлений унікальним ідентифікатором (id) як ключем масиву, а значення — це асоціативний масив із полями id, name, price та description. Цей файл включається в інші скрипти (наприклад, cart.php) для доступу до даних про товари під час обробки кошика, додавання чи відображення продуктів.
1  <?php
2  $products = [
3      1 => [
4          'id' => 1,
5          'name' => 'Fanta',
6          'price' => 1,
7          'description' => 'Orange flavored carbonated drink'
8      ],
9      2 => [
10         'id' => 2,
11         'name' => 'Sprite',
12         'price' => 1,
13         'description' => 'Clear lemon-lime flavored carbonated drink',
14     ],
15     3 => [
16         'id' => 3,
17         'name' => 'Nuts',
18         'price' => 1,
19         'description' => 'Assorted nuts mix',
20     ]
21 ];
Фрагмент коду з основного сценарію, Додаток В.


3.2.4 Файл footer.phtml

       Файл footer.phtml визначає нижню частину (футер) сторінок веб-магазину, містить навігаційні посилання на головну сторінку (index.php), сторінку товарів (products.php), кошик (cart.php) та сторінку "Про нас" (about_us.php). Подібно до header.phtml, він включає повну HTML-структуру (, , , ), що викликає невалідність HTML при включенні в основні файли (products.php, cart.php), які вже мають ці теги. Футер використовує просту розмітку з роздільниками (|) між посиланнями, але не підключає CSS для стилізації.


1. <!DOCTYPE html> 
2. <html> 
3. <head>
4.     <meta charset="UTF-8"> 
5. </head> 
6. <body> 
7.     <footer> 
8.         <a href="index.php">Home</a> | 
9.         <a href="index.php">Products</a> | 
10.         <a href="cart.php">Cart</a> | 
11.         <a href="about_us.php">About Us</a> 
12.     </footer> 
13. </body> 
14. </html> 


Фрагмент коду з основного сценарію, Додаток В


3.2.5 Файл functions.php
Файл functions.php містить набір допоміжних функцій для роботи з кошиком у веб-магазині. Він включає функції для очищення кошика, перенаправлення на іншу сторінку, зменшення кількості товару в кошику та відображення сторінки успішної оплати. Ці функції використовуються в інших скриптах, таких як cart.php, для обробки дій користувача, таких як видалення товарів, скасування замовлення чи завершення оплати.
3.2.5.1 Функція clearCart

Функція clearCart() очищає кошик, встановлюючи масив $_SESSION['cart'] у порожній масив. Вона повертає true, щоб позначити успішне виконання. Використовується для скасування замовлення або після успішної оплати в cart.php.

1  function clearCart() {
2      $_SESSION['cart'] = [];
3      return true;
4  }

Фрагмент коду з основного сценарію, Додаток В
3.2.5.2 Функція redirectTo


Функція redirectTo($url) виконує перенаправлення на вказану URL-адресу, використовуючи заголовок HTTP Location. Після встановлення заголовка викликається exit(), щоб зупинити виконання скрипта. Використовується для перенаправлення після дій, таких як додавання товару до кошика чи його видалення.

5
6  function redirectTo($url) {
7      header("Location: $url");
8      exit();
9  }

Фрагмент коду з основного сценарію, Додаток В


3.2.5.3 Функція decreaseCartItem

Функція decreaseCartItem($product_id) зменшує кількість одиниць товару з вказаним product_id у кошику на 1. Якщо кількість стає 0, товар видаляється з $_SESSION['cart']. У разі відсутності товару в кошику записується помилка в лог і повертається false. Використовується для обробки дії зменшення кількості товару в cart.php.

10
11 function decreaseCartItem($product_id) {
12     if (isset($_SESSION['cart'][$product_id])) {
13         $_SESSION['cart'][$product_id]['quantity'] = max(0, (int)$_SESSION['cart'][$product_id]['quantity'] - 1);
14         if ($_SESSION['cart'][$product_id]['quantity'] === 0) {
15             unset($_SESSION['cart'][$product_id]);
16         }
17         return true;
18     }
19     error_log("Failed to decrease quantity for product ID: $product_id - not found in cart");
20     return false;
21 }







3.2.5.4 Функція displayPaymentSuccess

Функція displayPaymentSuccess($returnUrl) генерує HTML-сторінку, яка відображає повідомлення про успішну оплату та посилання для повернення до покупок. Вона включає вбудований CSS для центрування вмісту та стилізації посилання. Після виведення HTML викликається exit(), щоб зупинити виконання скрипта. Використовується в cart.php після дії "Оплатити".

23 function displayPaymentSuccess($returnUrl) {
24     ?>
25     <!DOCTYPE html>
26     <html lang="uk">
27     <head>
28         <meta charset="UTF-8">
29         <title>Оплата завершена</title>
30         <style>
31             body {
32                 display: flex;
33                 justify-content: center;
34                 align-items: center;
35                 height: 100vh;
36                 margin: 0;
37                 background-color: #fff;
38                 flex-direction: column;
39             }
40             a {
41                 color: #007bff;
42                 text-decoration: none;
43                 font-size: 18px;
44             }
45             a:hover {
46                 text-decoration: underline;
47             }
48         </style>
49     </head>
50     <body>
51         <h2>Оплата успішно завершена!</h2>
52         <p><a href="<?= htmlspecialchars($returnUrl) ?>">Перейти до покупок</a></p>
53     </body>
54     </html>
55     <?php
56     exit();}


Фрагмент коду з основного сценарію, Додаток В


3.2.6 Файл cart.php
Файл cart.php відповідає за відображення та управління кошиком у веб-магазині. Він обробляє додавання товарів до кошика, зменшення кількості товарів, скасування замовлення та завершення оплати. Сторінка відображає таблицю з товарами в кошику, включаючи їх ID, назву, ціну, кількість, суму за кожен товар і загальну суму. Користувач може зменшити кількість товару за допомогою іконки смітника, скасувати замовлення або оплатити товари. Файл включає header.phtml і footer.phtml для консистентного дизайну, а також використовує вбудований CSS для стилізації таблиці та кнопок.
3.2.6.1 Ініціалізація сесії та підключення файлів

       Ініціалізує PHP-сесію для роботи з кошиком ($_SESSION['cart']) та підключає файли products_data.php (масив $products) і functions.php (функції clearCart, redirectTo, decreaseCartItem, displayPaymentSuccess). Ця частина забезпечує доступ до необхідних даних і функцій для обробки запитів.

1  <?php
2  session_start();
3  require_once 'products_data.php';
4  require_once 'functions.php';
5

Фрагмент коду з основного сценарію, Додаток В


3.2.6.2 Обробка додавання товару до кошика

Перевіряє, чи є POST-запит із product_id і quantity. Якщо товар існує в $products, додає його до $_SESSION['cart'] або збільшує кількість, якщо він уже є. У разі невалідного product_id записує помилку в лог. Після виконання перенаправляє на cart.php.

6  if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['product_id'], $_POST['quantity'])) {
7      $product_id = (int)$_POST['product_id'];
8      $quantity = max(1, (int)$_POST['quantity']);
9
10     if (isset($products[$product_id])) {
11         $product = $products[$product_id];
12         if (isset($_SESSION['cart'][$product_id])) {
13             $_SESSION['cart'][$product_id]['quantity'] += $quantity;
14         } else {
15             $_SESSION['cart'][$product_id] = [
16                 'name' => $product['title'],
17                 'price' => (float)$product['price'],
18                 'quantity' => $quantity
19             ];
20         }
21     } else {
22         error_log("Attempted to add invalid product ID: $product_id");
23     }
24     redirectTo('cart.php');
25     exit();
26 }
27

Фрагмент коду з основного сценарію, Додаток В


3.2.6.3 Обробка зменшення кількості товару

Перевіряє POST-запит із action=decrease і product_id. Викликає функцію decreaseCartItem для зменшення кількості товару на 1 (або видалення, якщо кількість стає 0). Записує в лог успішне зменшення та перенаправляє на cart.php.

28 if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'decrease' && isset($_POST['product_id'])) {
29     $product_id = (int)$_POST['product_id'];
30     if (decreaseCartItem($product_id)) {
31         error_log("Decreased quantity for product ID: $product_id");
32         redirectTo('cart.php');
33     }
34     exit();
35 }
36

Фрагмент коду з основного сценарію, Додаток В


3.2.6.4 Обробка скасування та оплати

Обробляє інші POST-запити: скасування кошика (cancel) викликає clearCart для очищення $_SESSION['cart'], а оплата (pay) очищає кошик і відображає сторінку успішної оплати через displayPaymentSuccess. Логує отримані POST-дані для діагностики та перенаправляє на cart.php або сторінку оплати.

37 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
38     error_log("POST data received: " . print_r($_POST, true));
39     if (isset($_POST['cancel'])) {
40         if (clearCart()) {
41             redirectTo('cart.php');
42         }
43     } elseif (isset($_POST['pay'])) {
44         if (clearCart()) {
45             displayPaymentSuccess('index.php');
46         }
47     }
48     exit();
49 }
50 ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.5 HTML-структура сторінки та стилі

Визначає HTML-структуру сторінки з локалізацією (lang="uk"), метаданими (charset="UTF-8"), заголовком (Кошик) і підключенням style.css. Вбудований CSS стилізує контейнер кошика, таблицю, кнопки зменшення кількості (decrease_item) та кнопки дій (cancel, pay). Стилі забезпечують центрування, відступи та форматування таблиці.

51 <!DOCTYPE html>
52 <html lang="uk">
53 <head>
54     <meta charset="UTF-8">
55     <title>Кошик</title>
56     <link rel="stylesheet" href="style.css">
57     <style>
58         .cart-container {
59             max-width: 800px;
60             margin: 0 auto;
61             padding: 20px;
62         }
63         table {
64             width: 100%;
65             border-collapse: collapse;
66             margin-top: 20px;
67         }
68         th, td {
69             border: 1px solid #ddd;
70             padding: 10px;
71             text-align: center;
72         }
73         th {
74             background-color: #f2f2f2;
75         }
76         button[name="decrease_item"] {
77             background: none;
78             border: none;
79             color: #dc3545;
80             cursor: pointer;
81             font-size: 18px;
82         }
83         .buttons {
84             margin-top: 20px;
85             text-align: center;
86         }
87         .buttons form {
88             display: inline-block;
89             margin: 0 10px;
90         }
91         .buttons button {
92             padding: 5px 15px;
93         }
94     </style>
95 </head>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.6 Відкриття тегу body та включення заголовка

Починає тег <body> і включає файл header.phtml, який містить навігаційне меню з посиланнями на головну сторінку (index.php), товари (products.php) та кошик (cart.php). Це забезпечує однаковий вигляд верхньої частини сторінки у всьому проєкті.

96  <body>
97      <?php include 'header.phtml'; ?>

Фрагмент коду з основного сценарію, Додаток В








3.2.6.7 Відкриття основного вмісту та заголовок сторінки

Відкриває тег <main> для основного вмісту сторінки та відображає заголовок <h2>Кошик</h2>, який позначає, що користувач перебуває на сторінці кошика.


98      <main>
99          <h2>Кошик</h2>


Фрагмент коду з основного сценарію, Додаток В


3.2.6.8 Логування даних кошика

       Перевіряє наявність $_SESSION['cart'] і записує його вміст у лог за допомогою error_log. Це допомагає у діагностиці, дозволяючи розробнику перевірити стан кошика під час виконання.

100         <?php
101         if (isset($_SESSION['cart'])) {
102             error_log("Cart data: " . print_r($_SESSION['cart'], true));
103         }
104         ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.9 Відображення повідомлення про порожній кошик

Якщо кошик порожній (empty($_SESSION['cart'])), відображається повідомлення "Кошик порожній" у параграфі з вирівнюванням по центру (style="text-align: center;"). Це інформує користувача, що в кошику немає товарів.

105         <?php if (empty($_SESSION['cart'])): ?>
106             <p style="text-align: center;">Кошик порожній.</p>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.10 Контейнер для таблиці кошика


Якщо кошик не порожній, відкривається <div> із класом cart-container, який обмежує ширину таблиці та додає відступи (стилі визначені у вбудованому CSS). Це забезпечує структуроване відображення таблиці з товарами.

107         <?php else: ?>
108             <div class="cart-container">

Фрагмент коду з основного сценарію, Додаток В
3.2.6.11 Заголовок таблиці
Визначає HTML-таблицю з тегом <table> і її заголовком (<thead>), який містить колонки: ID, Назва, Ціна, Кількість, Сума, Дія. Це формує структуру для відображення товарів у кошику.

109                 <table>
110                     <thead>
111                         <tr>
112                             <th>ID</th>
113                             <th>Назва</th>
114                             <th>Ціна</th>
115                             <th>Кількість</th>
116                             <th>Сума</th>
117                             <th>Дія</th>
118                         </tr>
119                     </thead>


Фрагмент коду з основного сценарію, Додаток В


3.2.6.12 Тіло таблиці та обробка товарів


Відкриває <tbody> і ініціалізує змінну $total для обчислення загальної суми. Цикл foreach перебирає товари в $_SESSION['cart'], перевіряє валідність product_id (чи є числовим і чи існує в $products). Якщо product_id невалідний, видаляє товар із кошика та записує помилку в лог. Для кожного валідного товару витягує дані (name, price, quantity), обчислює суму за товар ($sum) і додає її до $total.

120                     <tbody>
121                         <?php
122                         $total = 0;
123                         foreach ($_SESSION['cart'] as $id => $item):
124                             if (!is_numeric($id) || !isset($products[(int)$id])) {
125                                 error_log("Invalid or missing product ID: $id in cart");
126                                 unset($_SESSION['cart'][$id]);
127                                 continue;
128                             }
129
130                             $product_id = (int)$id;
131                             $name = isset($item['name']) ? $item['name'] : ($products[$product_id]['title'] ?? 'Unknown');
132                             $price = isset($item['price']) ? (float)$item['price'] : ($products[$product_id]['price'] ?? 0.00);
133                             $quantity = isset($item['quantity']) ? (int)$item['quantity'] : 0;
134
135                             $sum = $price * $quantity;
136                             $total += $sum;
137                         ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.13 Відображення рядка товару
Для кожного товару генерується рядок таблиці (<tr>), який містить ID, назву, ціну, кількість, суму та форму з кнопкою зменшення кількості (🗑️). Дані екрануються за допомогою htmlspecialchars для захисту від XSS. Форма відправляє POST-запит із action=decrease для зменшення кількості товару.

138                         <tr>
139                             <td><?= htmlspecialchars((string)$product_id) ?></td>
140                             <td><?= htmlspecialchars($name) ?></td>
141                             <td>$<?= number_format($price, 2) ?></td>
142                             <td><?= $quantity ?></td>
143                             <td>$<?= number_format($sum, 2) ?></td>
144                             <td>
145                                 <form method="POST" action="cart.php">
146                                     <input type="hidden" name="action" value="decrease">
147                                     <input type="hidden" name="product_id" value="<?= $product_id ?>">
148                                     <button type="submit" name="decrease_item">🗑️</button>
149                                 </form>
150                             </td>
151                         </tr>
152                         <?php endforeach; ?>


Фрагмент коду з основного сценарію, Додаток В

3.2.6.14 Відображення загальної суми
Додає рядок у таблицю для відображення загальної суми кошика. Текст "Загальна сума" розміщується в колонці ID, а значення $total (відформатоване до двох знаків після коми) — у колонці Сума. Інші колонки залишаються порожніми.

153                         <tr>
154                             <td><strong>Загальна сума</strong></td>
155                             <td></td>
156                             <td></td>
157                             <td></td>
158                             <td><strong>$<?= number_format($total, 2) ?></strong></td>
159                             <td></td>
160                         </tr>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.15 Фрагмент коду з основного сценарію, Додаток В


Закриття таблиці та контейнера

Закриває теги <tbody>, <table> і <div class="cart-container">, завершуючи відображення таблиці з товарами.

161                     </tbody>
162                 </table>
163                 </div>


Фрагмент коду з основного сценарію, Додаток В

3.2.6.16 Кнопки дій (Скасувати та Оплатити)
Відображає блок <div class="buttons"> із двома формами для дій: "Скасувати" (очищає кошик) та "Оплатити" (очищає кошик і показує сторінку успішної оплати). Форми розміщені в ряд за допомогою стилів (display: inline-block).

164                 <div class="buttons">
165                     <form method="POST" action="cart.php">
166                         <button type="submit" name="cancel">Скасувати</button>
167                     </form>
168                     <form method="POST" action="cart.php">
169                         <button type="submit" name="pay">Оплатити</button>
170                     </form>
171                 </div>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.17 Закриття умовного блоку та основного вмісту

Закриває умовний блок <?php else: ?> (початок на рядку 107) і тег <main>, завершуючи відображення вмісту сторінки.

172             </div>
173         <?php endif; ?>
174     </main>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.18 Включення футера та закриття HTML


Включає файл footer.phtml для відображення нижньої частини сторінки (навігаційні посилання) і закриває теги <body> та <html>, завершуючи сторінку.

175     <?php include 'footer.phtml'; ?>
176 </body>
177 </html>


Фрагмент коду з основного сценарію, Додаток В


3.2.7 Файл index.php
Файл index.php є головною сторінкою веб-магазину, яка відображає список товарів у вигляді таблиці з можливістю вибору кількості для кожного товару та додавання їх до кошика. Він ініціалізує сесію, підключає products_data.php для доступу до масиву $products, обробляє POST-запит для додавання кількох товарів до кошика одночасно та перенаправляє на cart.php. Сторінка включає header.phtml і footer.phtml для консистентного дизайну, відображає повідомлення про помилку, якщо товари не вибрано, і використовує вбудований CSS для стилізації кнопки "Додати до кошика".
3.2.7.1 Ініціалізація сесії та підключення файлів
Ініціалізує PHP-сесію для роботи з кошиком ($_SESSION['cart']) і підключає файл products_data.php, який містить масив $products із даними про товари. Це забезпечує доступ до необхідних даних для обробки запитів і відображення товарів.

2  session_start();
3  require_once 'products_data.php';
4

Фрагмент коду з основного сценарію, Додаток В


3.2.7.2 Обробка POST-запиту для додавання товарів до кошика

Перевіряє, чи є POST-запит, і ініціалізує $_SESSION['cart'], якщо він ще не існує. Перебирає масив $_POST['quantities'], який містить ID товарів і відповідні кількості. Для кожного валідного товару (product_id > 0, quantity > 0, існує в $products) додає його до кошика або збільшує кількість, якщо товар уже є. Якщо хоча б один товар додано, перенаправляє на cart.php. Інакше встановлює повідомлення про помилку.

5  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
6      if (!isset($_SESSION['cart'])) {
7          $_SESSION['cart'] = [];
8      }
9      $hasSelected = false;
10
11     if (isset($_POST['quantities']) && is_array($_POST['quantities'])) {
12         foreach ($_POST['quantities'] as $product_id => $quantity) {
13             $product_id = (int)$product_id;
14             $quantity = (int)$quantity;
15
16             if ($product_id > 0 && $quantity > 0 && isset($products[$product_id])) {
17                 $hasSelected = true;
18
19                 if (isset($_SESSION['cart'][$product_id])) {
20                     $_SESSION['cart'][$product_id]['quantity'] += $quantity;
21                 } else {
22                     $_SESSION['cart'][$product_id] = [
23                         'name' => $products[$product_id]['name'],
24                         'price' => $products[$product_id]['price'],
25                         'quantity' => $quantity
26                     ];
27                 }
28             }
29         }
30     }
31
32     if ($hasSelected) {
33         header('Location: cart.php');
34         exit;
35     } else {
36         $error = "Оберіть хоча б один товар із кількістю більше нуля.";
37     }
38 }
39 ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.3 HTML-структура сторінки та стилі


Визначає HTML-структуру сторінки з локалізацією (lang="uk"), метаданими (charset="UTF-8"), заголовком (Інтернет-магазин) і підключенням style.css. Вбудований CSS стилізує кнопку "Додати до кошика" (custom-submit-button), задаючи відступи та розміри. Ця частина забезпечує базовий макет сторінки.

40 <!DOCTYPE html>
41 <html lang="uk">
42 <head>
43     <meta charset="UTF-8">
44     <title>Інтернет-магазин</title>
45     <link rel="stylesheet" href="style.css">
46     <style>
47         .custom-submit-button {
48             display: block;
49             margin-left: 1200px;
50             margin-top: 20px;
51             padding: 10px 20px;
52             font-size: 16px;
53         }
54     </style>
55 </head>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.4 Відображення заголовка та повідомлення про помилку

Включає header.phtml для навігації, відкриває тег <main> і відображає заголовок <h2>Список товарів</h2>. Якщо встановлена змінна $error, показує повідомлення про помилку (наприклад, "Оберіть хоча б один товар із кількістю більше нуля.") з екрануванням через htmlspecialchars для захисту від XSS.

56 <body>
57     <?php include 'header.phtml'; ?>
58     <main>
59         <h2>Список товарів</h2>
60         <?php if (isset($error)): ?>
61             <p class="error"><?= htmlspecialchars($error) ?></p>
62         <?php endif; ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.5 Форма та таблиця товарів

Створює форму з методом POST, яка відправляє дані на index.php. Форма містить таблицю з колонками: Назва, Кількість, Ціна. Для кожного товару з $products генерується рядок із назвою (екранованою через htmlspecialchars), полем введення кількості (quantities[ID]) та ціною, відформатованою до двох знаків після коми. Поле кількості має значення за замовчуванням 0 і мінімальне значення 0.

63         <form method="POST" action="index.php" id="product-form" class="centered">
64             <table>
65                 <thead>
66                     <tr>
67                         <th>Назва</th>
68                         <th>Кількість</th>
69                         <th>Ціна</th>
70                     </tr>
71                 </thead>
72                 <tbody>
73                     <?php foreach ($products as $product): ?>
74                         <tr>
75                             <td><?= htmlspecialchars($product['name']) ?></td>
76                             <td>
77                                 <input type="number" name="quantities[<?= $product['id'] ?>]" value="0" min="0">
78                             </td>
79                             <td>$<?= number_format($product['price'], 2) ?></td>
80                         </tr>
81                     <?php endforeach; ?>
82                 </tbody>
83             </table>
84         </form>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.6 Кнопка "Додати до кошика" та завершення сторінки

Додає кнопку "Додати до кошика" з класом custom-submit-button, яка викликає відправлення форми через JavaScript (onclick="document.getElementById('product-form').submit();"). Кнопка має вбудовані стилі (відступ зліва 1200px, верхній відступ 20px). Завершує сторінку закриттям тегів <main>, включенням footer.phtml і закриттям <body> та <html>.

85         <button type="button" class="custom-submit-button" onclick="document.getElementById('product-form').submit();">Додати до кошика</button>
86     </main>
87     <?php include 'footer.phtml'; ?>
88 </body>
89 </html>


Фрагмент коду з основного сценарію, Додаток В


3.2.8 Файл style.css


3.2.8.1 Глобальні стилі для body

Задає базові стилі для тегу <body>, включаючи шрифт (Arial, sans-serif), нульовий зовнішній відступ, нижній відступ 60px (імовірно, для фіксованого футера), і світло-сірий фон (#f5f5f5). Це забезпечує єдиний вигляд для всіх сторінок.

1  body {
2      font-family: Arial, sans-serif;
3      margin: 0;
4      padding-bottom: 60px;
5      background-color: #f5f5f5;
6  }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.2 Стилі для центрованого контейнера
Визначає клас .centered, який використовується для контейнерів (наприклад, у index.php для форми). Задає максимальну ширину 800px і мінімальну висоту 400px, центруючи контейнер за допомогою margin: 0 auto. Це забезпечує адаптивний макет для вмісту.

7
8  .centered {
9      max-width: 800px;
10     min-height: 400px;
11     margin: 0 auto;
12 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.3 Стилі для заголовка h2
Задає стиль для тегу <h2>, центруючи текст і додаючи правий відступ 600px. Цей відступ може виглядати некоректно на малих екранах, зміщуючи текст занадто вліво.

13
14 h2 {
15     text-align: center;
16     padding-right: 600px;
17 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.4 Стилі для header і footer
Задає стилі для тегів <header> і <footer>, включаючи темно-сірий фон (#333), білий колір тексту, відступи 10px і центрування тексту. Для футера додатково визначено фіксоване позиціонування внизу сторінки (position: fixed), що забезпечує його видимість на всіх сторінках.

18
19 header, footer {
20     background: #333;
21     color: white;
22     padding: 10px;
23     text-align: center;
24 }
...
65 footer {
66     position: fixed;
67     bottom: 0;
68     left: 0;
69     right: 0;
70     background: #333;
71     color: #fff;
72     text-align: center;
73     padding: 15px;
74 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.5 Стилі для посилань у header і footer
Задає стилі для посилань (<a>) у <header> і <footer>, включаючи білий колір, відступи 15px по горизонталі та відсутність підкреслення. Це забезпечує єдиний вигляд навігаційних посилань у header.phtml і footer.phtml.


25
26 header a, footer a {
27     color: white;
28     margin: 0 15px;
29     text-decoration: none;
30 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.6 Стилі для навігації (nav-flex)
Визначає клас .nav-flex для навігаційного меню в header.phtml, використовуючи flexbox для розподілу елементів (justify-content: space-between). Класи .nav-left, .nav-center, .nav-right забезпечують вирівнювання (зліва, по центру, справа), а .separator задає стиль для роздільників (|) у навігації з великими відступами 120px.

31
32 .nav-flex {
33     display: flex;
34     justify-content: space-between;
35     align-items: center;
36 }
37
38 .nav-left, .nav-center, .nav-right {
39     flex: 1;
40     text-align: center;
41 }
42
43 .nav-left {
44     text-align: left;
45 }
46
47 .nav-right {
48     text-align: right;
49 }
50
51 .separator {
52     color: white;
53     margin: 0 120px;
54 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.7 Стилі для контейнера
Визначає клас .container, який використовується для основного вмісту сторінок (наприклад, у cart.php чи about_us.php). Задає максимальну ширину 800px, білий фон, відступи 20px і легку тінь для естетичного вигляду.


55
56 .container {
57     max-width: 800px;
58     margin: 0 auto;
59     padding: 20px;
60     background: #fff;
61     box-shadow: 0 0 10px rgba(0,0,0,0.05);
62 }


Фрагмент коду з основного сценарію, Додаток В


3.2.8.8 Стилі для таблиць
Задає стилі для таблиць (<table>), включаючи повну ширину, згортання меж, верхній відступ 20px. Колонки (th, td) мають сірі межі (#ccc), відступи 10px і центрування тексту. Заголовки (th) мають світло-сірий фон (#e9e9e9).

63
64 table {
65     width: 100%;
66     border-collapse: collapse;
67     margin-top: 20px;
68 }
69
70 th, td {
71     border: 1px solid #ccc;
72     padding: 10px;
73     text-align: center;
74 }
75
76 th {
77     background-color: #e9e9e9;
78 }
Фрагмент коду з основного сценарію, Додаток В


3.2.8.9 Стилі для форм
Задає стиль для тегу <form>, використовуючи flexbox для розподілу елементів із рівними проміжками (justify-content: space-between) і верхнім відступом 20px. Це застосовується до форм у cart.php чи index.php.

79
80 form {
81     display: flex;
82     justify-content: space-between;
83     margin-top: 20px;
84 }


Фрагмент коду з основного сценарію, Додаток В


3.2.8.10 Стилі для кнопок
Задає стилі для кнопок (<button>), включаючи відступи 10x20px, синій фон (#2d89ef), білий текст, відсутність меж, курсор "pointer" і закруглені кути. При наведенні курсора фон темнішає (#1b5fbd).

85
86 button {
87     padding: 10px 20px;
88     background-color: #2d89ef;
89     color: white;
90     border: none;
91     cursor: pointer;
92     border-radius: 4px;
93 }
94
95 button:hover {
96     background-color: #1b5fbd;
97 }


Фрагмент коду з основного сценарію, Додаток В


3.2.9 Файл auth_check.php
Фрагмент коду PHP, наведений у файлі, наприклад, auth_check.php, виконує перевірку автентифікації користувача. Його функція полягає в тому, щоб перевірити, чи встановлена змінна сесії username. Якщо змінна сесії не встановлена (тобто користувач не автентифікований), скрипт перенаправляє користувача на сторінку помилки 404 (main.php?page=page404) і завершує виконання. Це гарантує, що лише автентифіковані користувачі можуть отримати доступ до захищеної сторінки чи ресурсу.
1 <?php
2 if (!isset($_SESSION['username'])) {
3     header('Location: main.php?page=page404');
4     exit();
5 }
6 ?>
Фрагмент коду з основного сценарію, Додаток В


3.2.10 Файл credential.php
Cтворює асоціативний масив $credentials, який містить два ключі: userName зі значенням 'Test' та password зі значенням '123123'. Цей масив, ймовірно, використовується для зберігання облікових даних користувача, таких як ім'я користувача та пароль, для подальшої обробки, наприклад, перевірки автентифікації.
1 <?php
2 $credentials = [
3     'userName' => 'Test',
4    'password' => '123123'
5 ];
6 ?>
Фрагмент коду з основного сценарію, Додаток В


3.2.11 Файл header.php
Цей HTML-код із вбудованим PHP представляє базову структуру веб-сторінки для простого інтернет-магазину. CSS-стилі перенесено до секції <head> для форматування сторінки. Основна логіка зосереджена в PHP-коді, який динамічно відображає вміст шапки (<header>) залежно від статусу автентифікації користувача. PHP-код перевіряє, чи встановлена змінна сесії $_SESSION['username']:
* Якщо користувач автентифікований (змінна існує), у шапці відображаються посилання: "Home", "Products", "Cart", "Profile" та "Logout".
* Якщо користувач не автентифікований, у шапці показуються лише посилання: "Home", "Products" та "Login".
1 <?php
2 if (isset($_SESSION['username'])): ?>
3     <header>
4         <a href="index.php">Home</a> |
5         <a href="index.php">Products</a> |
6         <a href="cart.php">Cart</a> |
7         <a href="profile.php">Profile</a> |
8         <a href="logout.php">Logout</a>
9     </header>
10 <?php else: ?>
11    <header>
12        <a href="index.php">Home</a> |
13        <a href="index.php">Products</a> |
14        <a href="login.php">Login</a>
15    </header>
16 <?php endif; ?>


Фрагмент коду з основного сценарію, Додаток В
3.2.12 Файл login.php
3.2.12.1 Підключення файлів і початок сесії
Код підключає файл credential.php (містить масив $credentials з даними для авторизації), ініціалізує сесію через session_start() і створює порожню змінну $error для зберігання повідомлень про помилки.


1  <?php
2  require_once 'credential.php';
3  session_start();
4  $error = '';
5  ?>


Фрагмент коду з основного сценарію, Додаток В


3.2.12.2 Обробка POST-запиту для авторизації
Опис: Перевіряє, чи запит є POST (тобто чи відправлена форма). Отримує userName і password із форми, порівнює з даними з $credentials. Якщо дані правильні, створює сесійні змінні username і login_time, перенаправляє на index.php. Інакше встановлює повідомлення про помилку.


1  <?php
2  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
3      $inputUsername = $_POST['userName'] ?? '';
4      $inputPassword = $_POST['password'] ?? '';
5
6      if ($inputUsername === $credentials['userName'] && $inputPassword === $credentials['password']) {
7          $_SESSION['username'] = $inputUsername;  
8          $_SESSION['login_time'] = date("Y-m-d H:i:s");
9          header('Location: index.php');
10         exit();
11     } else {
12         $error = 'Неправильне ім’я користувача або пароль.';
13     }
14 }
15 ?>


Фрагмент коду з основного сценарію, Додаток В


3.2.12.3 HTML-структура сторінки
Опис: HTML-розмітка створює сторінку авторизації з формою для введення імені користувача та пароля. Використовується Bootstrap для стилізації, додаткові CSS-стилі в <head> для контейнера форми та футера. Якщо є помилка ($error), відображається повідомлення в блоці alert. Форма відправляє дані методом POST.


1 <!DOCTYPE html>
2 <html lang="uk">
3 <head>
4     <meta charset="UTF-8">
5     <title>Вхід</title>
6     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
7     <style>
8         .login-container {
9             max-width: 400px;
10            margin: 200px auto;
11            padding: 20px;
12            border: 1px solid #ccc;
13            border-radius: 5px;
14        }
15        .form-label {
16            font-weight: bold;
17        }
18        .btn-login {
19            width: 100%;
20        }
21        footer { 
22            background: #333; 
23            color: white; 
24            padding: 10px; 
25            text-align: center; 
26        }
27        footer a { 
28            color: white; 
29            margin: 0 15px; 
30            text-decoration: none; 
31        }
32        footer {
33            position: fixed;
34            bottom: 0;
35            left: 0;
36            right: 0;
37            background: #333;
38            color: white;
39            text-align: center;
40            padding: 15px;
41        }
42    </style>
43 </head>
44 <body>
45    <div class="login-container">
46        <h2 class="text-center mb-4">Авторизація</h2>
47        
48        <?php if ($error): ?>
49            <div class="alert alert-danger" role="alert">
50                <?= htmlspecialchars($error) ?>
51            </div>
52        <?php endif; ?>
53
54        <form method="post">
55            <div class="mb-3">
56                <label for="userName" class="form-label">Ім'я користувача:</label>
57                <input type="text" class="form-control" id="userName" name="userName" required>
58            </div>
59            <div class="mb-3">
60                <label for="password" class="form-label">Пароль:</label>
61                <input type="password" class="form-control" id="password" name="password" required>
62            </div>
63            <button type="submit" class="btn btn-primary btn-login">Увійти</button>
64        </form>
65    </div>
66 </body>
67 </html>


Фрагмент коду з основного сценарію, Додаток В
3.2.12.4 Підключення футера
Код підключає файл footer.phtml через include, який, ймовірно, містить HTML-розмітку для футера сторінки (наприклад, посилання або інформацію про сайт).


1  <?php include 'footer.phtml'; ?>


Фрагмент коду з основного сценарію, Додаток В




3.2.13 Файл logout.php
Цей PHP-код, що належить до файлу logout.php, відповідає за завершення сесії користувача та вихід із системи. Нижче я розберу його на ключові частини, опишу їх функціональність і пронумерую код у текстовому блоці прямо в чаті.
3.2.13.1  Ініціалізація та очищення сесії
Код ініціалізує сесію через session_start(), щоб отримати доступ до поточних сесійних даних. Потім масив $_SESSION очищається, видаляючи всі збережені сесійні змінні (наприклад, username, login_time).
1  <?php
2  session_start();
3  $_SESSION = [];
4  ?>


Фрагмент коду з основного сценарію, Додаток В
3.2.13.2 Очищення сесійного cookie
Код перевіряє, чи сесії використовують cookies (session.use_cookies). Якщо так, отримує параметри поточного сесійного cookie через session_get_cookie_params(). Потім викликається setcookie(), щоб "видалити" сесійне cookie, встановлюючи його значення порожнім і термін дії в минулому (time() - 42000), використовуючи збережені параметри (шлях, домен, безпека тощо).
1  if (ini_get("session.use_cookies")) {
2      $params = session_get_cookie_params();
3      setcookie(
4          session_name(),
5          '',
6          time() - 42000,
7          $params["path"],
8          $params["domain"],
9          $params["secure"],
10         $params["httponly"]
11     );
12 }


Фрагмент коду з основного сценарію, Додаток В
3.2.13.3  Знищення сесії та перенаправлення
Функція session_destroy() повністю знищує сесію на сервері, видаляючи всі пов’язані дані. Після цього користувача перенаправляє на сторінку main.php за допомогою header("Location: main.php"), а exit() зупиняє подальше виконання скрипта.
1  session_destroy();
2  header("Location: main.php");
3  exit();


Фрагмент коду з основного сценарію, Додаток В


3.2.14 Файл main.php
3.2.14.1  Ініціалізація сесії та визначення сторінки
Код ініціалізує сесію через session_start(). Змінна $page отримує значення з параметра $_GET['page'], якщо він існує, або за замовчуванням встановлюється як 'home'. Потім підключається файл header.phtml, який містить HTML-розмітку для шапки сторінки.
1  <?php
2  session_start();
3
4  $page = isset($_GET['page']) ? $_GET['page'] : 'home';
5
6  include 'header.phtml';
7  ?>
Фрагмент коду з основного сценарію, Додаток В
3.2.14.2  Перевірка доступу до захищених сторінок
Визначається масив $protected_pages, який містить назви захищених сторінок (cart, profile, products). Якщо запитана сторінка є в цьому списку і користувач не автентифікований (немає $_SESSION['username']), відображається повідомлення про необхідність авторизації, підключається футер (footer.phtml) і виконання скрипта завершується.
1  $protected_pages = ['cart', 'profile', 'products'];
2
3  if (in_array($page, $protected_pages) && !isset($_SESSION['username'])) {
4      echo "<div style='text-align: center; padding: 20px; color: red; font-weight: bold;'>Потрібно авторизуватись для доступу до цієї сторінки.</div>";
5      include 'footer.phtml';
6      exit;
7  }
Фрагмент коду з основного сценарію, Додаток В
3.2.14.3  Перевірка домашньої сторінки для неавторизованих користувачів
Якщо запитана сторінка — 'home' і користувач не автентифікований, відображається повідомлення "Please login". Потім підключається футер (footer.phtml) і виконання скрипта завершується.


1  if ($page === 'home' && !isset($_SESSION['username'])) {
2      echo "<div style='text-align: center; padding: 50px; font-size: 24px; font-weight: bold;'>Please login</div>";
3      include 'footer.phtml';
4      exit;
5  }


Фрагмент коду з основного сценарію, Додаток В
3.2.14.4 Маршрутизація сторінок
Використовується конструкція switch для визначення, який PHP-файл підключити залежно від значення $page. Доступні сторінки: home, products, login, logout, cart, profile. Якщо значення $page не відповідає жодному з варіантів, підключається page404.php для відображення сторінки помилки 404.
1  switch ($page) {
2      case 'home':
3          require_once("index.php");
4          break;
5      case 'products':
6          require_once("index.php");
7          break;
8      case 'login':
9          require_once("login.php");
10         break;
11     case 'logout':
12         require_once("logout.php");
13         break;
14     case 'cart':
15         require_once("cart.php");
16         break;
17     case 'profile':
18         require_once("profile.php");
19         break;
20     default:
21         require_once("page404.php");
22         break;
23 }
Фрагмент коду з основного сценарію, Додаток В
3.2.15 Файл page404.php
3.2.15.1 HTML-структура та мета-теги
Код визначає HTML-документ із мовою українською (lang="uk"). У секції <head> встановлено кодування UTF-8, заголовок сторінки "Помилка 404 - Сторінка не знайдена" та підключено два CSS-файли: зовнішній style.css і Bootstrap 5.3.3 для стилізації.


1 <!DOCTYPE html>
2 <html lang="uk">
3 <head>
4     <meta charset="UTF-8">
5     <title>Помилка 404 - Сторінка не знайдена</title>
6     <link rel="stylesheet" href="style.css">
7     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
8 </head>


Фрагмент коду з основного сценарію, Додаток В
3.2.15.2  Контент сторінки помилки 404
У тілі документа (<body>) розташовано контейнер (div із класом container), який центрує вміст по вертикалі та горизонталі за допомогою Bootstrap-класів (d-flex, justify-content-center, align-items-center) та стилю min-height: 70vh. Всередині відображається заголовок "⛔ Помилка 404" червоним кольором (text-danger) і повідомлення зі посиланням на головну сторінку (index.php).


1 <div class="container mt-5 d-flex justify-content-center align-items-center" style="min-height: 70vh;">
2     <div>
3         <h1 class="text-danger">⛔ Помилка 404</h1>
4         <p class="lead">Сторінка не знайдена. Будь ласка, перевірте URL або <a href="index.php">поверніться на головну</a>.</p>
5     </div>
6 </div>


Фрагмент коду з основного сценарію, Додаток В


3.2.16 Файл profile.php
3.2.16.1  Перевірка авторизації
Код ініціалізує сесію через session_start(). Якщо змінна $_SESSION['username'] не встановлена (користувач не автентифікований), він перенаправляється на main.php?page=auth_check із завершенням виконання скрипта.


1  <?php
2  session_start();
3
4  // Перевірка авторизації
5  if (!isset($_SESSION['username'])) {
6      header('Location: main.php?page=auth_check');
7      exit();
8  }
9  ?>


Фрагмент коду з основного сценарію, Додаток В
3.2.16.2  Ініціалізація профілю та підключення даних
Створюється асоціативний масив $profile із початковими порожніми значеннями для полів профілю. Якщо існує файл profile_data.php, він підключається, щоб завантажити збережені дані профілю. Ініціалізується змінна $message для повідомлень про помилки або успіх.


1  // Ініціалізація профілю
2  $profile = [
3      'first_name' => '',
4      'last_name' => '',
5      'birth_date' => '',
6      'about' => '',
7      'photo' => ''
8  ];
9
10 if (file_exists('profile_data.php')) {
11     include 'profile_data.php';
12 }
13
14 // Повідомлення про помилку або успіх
15 $message = '';
16 ?>


Фрагмент коду з основного сценарію, Додаток В
3.2.16.3 Обробка завантаження фото
Якщо запит є POST і містить файл photo, код перевіряє, чи немає помилок завантаження. Дозволяються лише файли типу JPG, PNG або GIF. Файл зберігається в директорію uploads/, оновлюється шлях у $profile['photo'], дані записуються в profile_data.php. У разі успіху чи помилки встановлюється відповідне повідомлення $message.
1  // Обробка завантаження фото
2  if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['photo'])) {
3      $photo_path = $profile['photo'];
4      if ($_FILES['photo']['error'] === UPLOAD_ERR_OK) {
5          $allowed_types = ['image/jpeg', 'image/png', 'image/gif'];
6          if (in_array($_FILES['photo']['type'], $allowed_types)) {
7              $target_dir = "uploads/";
8              if (!is_dir($target_dir)) {
9                  mkdir($target_dir, 0777, true);
10             }
11             $photo_path = $target_dir . basename($_FILES['photo']['name']);
12             if (move_uploaded_file($_FILES['photo']['tmp_name'], $photo_path)) {
13                 $profile['photo'] = $photo_path;
14                 file_put_contents('profile_data.php', '<?php $profile = ' . var_export($profile, true) . ';');
15                 $message = 'Фото успішно завантажено!';
16             } else {
17                 $message = 'Помилка при завантаженні фото.';
18             }
19         } else {
20             $message = 'Дозволені тільки JPG, PNG або GIF зображення.';
21         }
22     }
23 }


Фрагмент коду з основного сценарію, Додаток В
3.2.16.4 Обробка збереження даних профілю
Якщо запит є POST і поле first_name не порожнє, код отримує дані з форми (first_name, last_name, birth_date, about). Проводиться валідація: усі поля обов’язкові, ім’я та прізвище — мінімум 2 символи, вік — не менше 16 років, опис — мінімум 50 символів. При відсутності помилок дані зберігаються в $profile і записуються в profile_data.php. У разі помилок формується повідомлення з їх переліком.
1  // Обробка збереження профілю
2  if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($_POST['first_name'])) {
3      $first_name = trim($_POST['first_name'] ?? '');
4      $last_name = trim($_POST['last_name'] ?? '');
5      $birth_date = $_POST['birth_date'] ?? '';
6      $about = trim($_POST['about'] ?? '');
7      $photo_path = $profile['photo'];
8
9      $errors = [];
10
11     if (empty($first_name) || empty($last_name) || empty($birth_date) || empty($about)) {
12         $errors[] = "Усі поля повинні бути заповнені.";
13     }
14
15     if (strlen($first_name) < 2 || !is_string($first_name)) {
16         $errors[] = "Ім'я повинно містити щонайменше 2 символи.";
17     }
18     if (strlen($last_name) < 2 || !is_string($last_name)) {
19         $errors[] = "Прізвище повинно містити щонайменше 2 символи.";
20     }
21
22     $age = (int)((time() - strtotime($birth_date)) / (365.25 * 24 * 60 * 60));
23     if ($age < 16 || !$birth_date) {
24         $errors[] = "Вам повинно бути не менше 16 років або вкажіть коректну дату.";
25     }
26
27     if (strlen($about) < 50) {
28         $errors[] = "Стисла інформація повинна містити не менше 50 символів.";
29     }
30
31     if (empty($errors)) {
32         $profile = [
33             'first_name' => $first_name,
34             'last_name' => $last_name,
35             'birth_date' => $birth_date,
36             'about' => $about,
37             'photo' => $photo_path
38         ];
39
40     file_put_contents('profile_data.php', '<?php $profile = ' . var_export($profile, true) . ';');


Фрагмент коду з основного сценарію, Додаток В
3.2.16.5 Завершення обробки профілю
Продовження попереднього блоку. Якщо помилок немає, встановлюється повідомлення про успішне оновлення профілю. Інакше $message містить список помилок, об’єднаних тегом <br>.


1      $message = 'Профіль успішно оновлено!';
2      } else {
3          $message = implode('<br>', $errors);
4      }
5  }
6  ?>


Фрагмент коду з основного сценарію, Додаток В
3.2.16.6 HTML-структура сторінки
HTML-розмітка створює сторінку профілю з двома секціями: для фото та форми редагування даних. Використовується Bootstrap і власні CSS-стилі в <head> для стилізації контейнерів, форм і футера. Шапка містить навігаційні посилання, а футер підключається через footer.phtml.


1 <!DOCTYPE html>
2 <html lang="uk">
3 <head>
4     <meta charset="UTF-8">
5     <title>Профіль користувача</title>
6     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
7     <style>
8         body {
9             font-family: Arial, sans-serif;
10            margin: 0;
11            padding-bottom: 60px;
12            background-color: #f5f5f5;
13        }
14        .profile-container {
15            max-width: 1100px;
16            margin: 100px auto 20px;
17            display: flex;
18            gap: 20px;
19        }
20        .photo-section {
21            flex: 1;
22            text-align: center;
23        }
24        .photo-placeholder {
25            width: 400px;
26            height: 400px;
27            border: 2px dashed #ccc;
28            display: flex;
29            align-items: center;
30            justify-content: center;
31            margin-bottom: 10px;
32        }
33        .photo-placeholder img {
34            max-width: 100%;
35            max-height: 100%;
36        }
37        .form-section {
38            flex: 2;
39        }
40        .form-row {


Фрагмент коду з основного сценарію, Додаток В


3.2.16.7. Продовження стилів і шапка
Опис: Продовження CSS-стилів із попереднього блоку для форми, кнопок і футера. У <body> відображається шапка з навігаційними посиланнями (Home, Products, Cart, Logout).


1             display: flex;
2             gap: 20px;
3             margin-bottom: 20px;
4         }
5         .form-group {
6             flex: 1;
7         }
8         .description {
9             margin-bottom: 20px;
10        }
11        .save-btn {
12            text-align: right;
13        }
14        .upload-btn {
15            margin-top: 10px;
16        }
17        header, footer {
18            background: #333;
19            color: white;
20            padding: 10px;
21            text-align: center;
22        }
23        header a, footer a {
24            color: white;
25            margin: 0 15px;
26            text-decoration: none;
27        }
28        footer {
29            position: fixed;
30            bottom: 0;
31            left: 0;
32            right: 0;
33            background: #333;
34            color: #fff;
35            text-align: center;
36            padding: 15px;
37        }
38        h2 {
39            margin-bottom: 30px;
40        }
41    </style>
42 </head>
43 <body>
44   <header>
45       <a href="index.php">Home</a> |
46       <a href="index.php">Products</a> |
47       <a href="cart.php">Cart</a> |
48       <a href="logout.php">Logout</a>
49   </header>


Фрагмент коду з основного сценарію, Додаток В
3.2.16.8 Секція фото профілю
Секція .photo-section містить область для відображення фото профілю. Якщо фото є і файл існує, відображається зображення; інакше — символ ✖. Форма для завантаження фото відправляє POST-запит із типом multipart/form-data.


1     <div class="profile-container">
2         <div class="photo-section">
3             <div class="photo-placeholder">
4                 <?php if (!empty($profile['photo']) && file_exists($profile['photo'])): ?>
5                     <img src="<?= htmlspecialchars($profile['photo']) ?>" alt="Profile Photo">
6                 <?php else: ?>
7                     <span style="color: #ccc;">✖</span>
8                 <?php endif; ?>
9             </div>
10            <form method="POST" enctype="multipart/form-data" style="display: inline;">
11                <input type="file" class="form-control" id="photo" name="photo">
12                <button type="submit" class="btn btn-primary mt-2 upload-btn">Завантажити</button>
13            </form>
14        </div>


Фрагмент коду з основного сценарію, Додаток В
3.2.16.9 Форма редагування профілю
Секція .form-section містить форму для редагування даних профілю (ім’я, прізвище, дата народження, опис). Поля заповнені збереженими значеннями з $profile. При помилках чи успіху відображається повідомлення $message у відповідному кольорі (зелений для успіху, червоний для помилок).


1         <div class="form-section">
2             <h2 class="text-center">Профіль користувача</h2>
3             <?php if ($message): ?>
4                 <p class="text-center" style="color: <?= empty($errors) ? 'green' : 'red' ?>;"><?= htmlspecialchars($message) ?></p>
5             <?php endif; ?>
6
7             <form method="POST" enctype="multipart/form-data">
8                 <div class="form-row">
9                     <div class="form-group">
10                        <label for="first_name">Ім'я:</label>
11                        <input type="text" class="form-control" id="first_name" name="first_name" value="<?= htmlspecialchars($profile['first_name']) ?>" required>
12                    </div>
13                    <div class="form-group">
14                        <label for="last_name">Прізвище:</label>
15                        <input type="text" class="form-control" id="last_name" name="last_name" value="<?= htmlspecialchars($profile['last_name']) ?>" required>
16                    </div>
17                    <div class="form-group">
18                        <label for="birth_date">Дата народження:</label>
19                        <input type="date" class="form-control" id="birth_date" name="birth_date" value="<?= htmlspecialchars($profile['birth_date']) ?>" required>
20                    </div>
21                </div>
22                <div class="form-group description">
23                    <label for="about">Опис користувача:</label>
24                    <textarea class="form-control" id="about" name="about" rows="10" required><?= htmlspecialchars($profile['about']) ?></textarea>
25                </div>
26                <div class="save-btn">
27                    <button type="submit" class="btn btn-success">Зберегти</button>
28                </div>
29            </form>
30        </div>
31    </div>


Фрагмент коду з основного сценарію, Додаток В


3.2.16.10 Файл profile_data.php
Cтворює асоціативний масив $profile, який містить п’ять ключів: first_name (ім’я користувача), last_name (прізвище), birth_date (дата народження), about (опис користувача) і photo (шлях до файлу зображення профілю). Ці дані, ймовірно, були збережені з форми на сторінці профілю і використовуються для відображення інформації про користувача.
1  <?php
2  $profile = array (
3      'first_name' => 'Мак',
4      'last_name' => 'Погорєлов',
5      'birth_date' => '2006-03-19',
6      'about' => 'Мене звуть Вітто Скалєтто, і я народився на Сицилії..',
7      'photo' => 'uploads/slon.jpg',
8  );
9  ?>




























































4 ВИСНОВКИ
У ході виконання лабораторної роботи було досягнуто головної мети — побудувати більш масштабований і безпечний веб-застосунок. Перенесення шапки та підвалу в окремі шаблони дало змогу уніфікувати зовнішній вигляд усіх сторінок і спростити подальше обслуговування проєкту. Такий підхід зменшує дублювання коду, робить його читабельнішим і полегшує внесення змін у майбутньому.
Додання механізмів автентифікації та авторизації суттєво підвищило рівень безпеки. Сторінка логіна гарантує, що доступ до захищених розділів сайту отримують лише авторизовані користувачі, а реалізовані перевірки сесії запобігають несанкціонованому перегляду матеріалів. Таким чином, функціонал обмеження прав доступу працює коректно і відповідає сучасним вимогам веб-розробки.
Окрема сторінка профілю з можливістю завантаження фотографії збагатила користувацький досвід і продемонструвала вміння працювати з формами та файлами. Загалом виконана робота підтвердила засвоєння принципів модульного проєктування, правильної обробки HTTP-заголовків і керування сесіями. Отримані знання та реалізовані рішення створюють міцний фундамент для подальшого розвитку проєкту й інтеграції додаткових можливостей.




































ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
https://youtu.be/mDh6DkFIOvU
https://youtu.be/tUG-RwlNEes
00:00 - вступ і about_us.php
00:28 - auth_check.php
00:45 - cart.php
03:12 - credential.php
03:18 - footer.phtml
03:33 - functions.php
04:18 - header.phtml
05:09 - index.php
06:59 - login.php
07:46 - logout.php
08:34 - main.php
09:52- page404.php
10:07 - products_data.php
10:16 - profile_data.php
10:22 - profile.php
13:37 - результати роботи




























ДОДАТОК Б
Графічні матеріали


  

Рис.1 - сторінка незареєстрованих користувачів


  

Рис.2 - авторизація




  

Рис.3 - меню вибору товара


  

Рис.4 - корзина


  

Рис.5 - оплата


  

Рис.6 - профіль користувача




ДОДАТОК В
Програмний код
Програмний код можна подивитись у GitHub репозиторії: 
https://github.com/NurePohorielovMaksym/smp-pzpi-23-3-pohorielov-maksym/blob/main/Lab4/smp-pzpi-23-3-pohorielov-maksym-lab4/smp-pzpi-23-3-pohorielov-maksym-lab4-code


#cart.php
1. <?php
2. session_start();
3. require_once 'products_data.php';
4. require_once 'functions.php';
5. 
6. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['product_id'], $_POST['quantity'])) {
7.     $product_id = (int)$_POST['product_id'];
8.     $quantity = max(1, (int)$_POST['quantity']);
9. 
10.     if (isset($products[$product_id])) {
11.         $product = $products[$product_id];
12.         if (isset($_SESSION['cart'][$product_id])) {
13.             $_SESSION['cart'][$product_id]['quantity'] += $quantity;
14.         } else {
15.             $_SESSION['cart'][$product_id] = [
16.                 'name' => $product['title'],
17.                 'price' => (float)$product['price'],
18.                 'quantity' => $quantity
19.             ];
20.         }
21.     } else {
22.         error_log("Attempted to add invalid product ID: $product_id");
23.     }
24.     redirectTo('cart.php');
25.     exit();
26. }
27. 
28. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'decrease' && isset($_POST['product_id'])) {
29.     $product_id = (int)$_POST['product_id'];
30.     if (decreaseCartItem($product_id)) {
31.         error_log("Decreased quantity for product ID: $product_id");
32.         redirectTo('cart.php');
33.     }
34.     exit();
35. }
36. 
37. if ($_SERVER['REQUEST_METHOD'] === 'POST') {
38.     error_log("POST data received: " . print_r($_POST, true));
39.     if (isset($_POST['cancel'])) {
40.         if (clearCart()) {
41.             redirectTo('cart.php');
42.         }
43.     } elseif (isset($_POST['pay'])) {
44.         if (clearCart()) {
45.             displayPaymentSuccess('index.php');
46.         }
47.     }
48.     exit();
49. }
50. ?>
51. 
52. <!DOCTYPE html>
53. <html lang="uk">
54. <head>
55.     <meta charset="UTF-8">
56.     <title>Кошик</title>
57.     <link rel="stylesheet" href="style.css">
58.     <style>
59.         .cart-container {
60.             max-width: 800px; 
61.             margin: 0 auto; 
62.             padding: 20px;
63.         }
64.         table {
65.             width: 100%;
66.             border-collapse: collapse;
67.             margin-top: 20px;
68.         }
69.         th, td {
70.             border: 1px solid #ddd;
71.             padding: 10px;
72.             text-align: center;
73.         }
74.         th {
75.             background-color: #f2f2f2;
76.         }
77.         button[name="decrease_item"] {
78.             background: none;
79.             border: none;
80.             color: #dc3545;
81.             cursor: pointer;
82.             font-size: 18px;
83.         }
84.         .buttons {
85.             margin-top: 20px;
86.             text-align: center;
87.         }
88.         .buttons form {
89.             display: inline-block;
90.             margin: 0 10px;
91.         }
92.         .buttons button {
93.             padding: 5px 15px;
94.         }
95.     </style>
96. </head>
97. <body>
98.     <?php include 'header.phtml'; ?>
99.     <main>
100.         <h2>Кошик</h2>
101.         <?php
102.         if (isset($_SESSION['cart'])) {
103.             error_log("Cart data: " . print_r($_SESSION['cart'], true));
104.         }
105.         ?>
106.         <?php if (empty($_SESSION['cart'])): ?>
107.             <p style="text-align: center;">Кошик порожній.</p>
108.         <?php else: ?>
109.             <div class="cart-container">
110.                 <table>
111.                     <thead>
112.                         <tr>
113.                             <th>ID</th>
114.                             <th>Назва</th>
115.                             <th>Ціна</th>
116.                             <th>Кількість</th>
117.                             <th>Сума</th>
118.                             <th>Дія</th>
119.                         </tr>
120.                     </thead>
121.                     <tbody>
122.                         <?php
123.                         $total = 0;
124.                         foreach ($_SESSION['cart'] as $id => $item):
125.                             if (!is_numeric($id) || !isset($products[(int)$id])) {
126.                                 error_log("Invalid or missing product ID: $id in cart");
127.                                 unset($_SESSION['cart'][$id]);
128.                                 continue;
129.                             }
130. 
131.                             $product_id = (int)$id;
132.                             $name = isset($item['name']) ? $item['name'] : ($products[$product_id]['title'] ?? 'Unknown');
133.                             $price = isset($item['price']) ? (float)$item['price'] : ($products[$product_id]['price'] ?? 0.00);
134.                             $quantity = isset($item['quantity']) ? (int)$item['quantity'] : 0;
135. 
136.                             $sum = $price * $quantity;
137.                             $total += $sum;
138.                         ?>
139.                         <tr>
140.                             <td><?= htmlspecialchars((string)$product_id) ?></td>
141.                             <td><?= htmlspecialchars($name) ?></td>
142.                             <td>$<?= number_format($price, 2) ?></td>
143.                             <td><?= $quantity ?></td>
144.                             <td>$<?= number_format($sum, 2) ?></td>
145.                             <td>
146.                                 <form method="POST" action="cart.php">
147.                                     <input type="hidden" name="action" value="decrease">
148.                                     <input type="hidden" name="product_id" value="<?= $product_id ?>">
149.                                     <button type="submit" name="decrease_item">🗑️</button>
150.                                 </form>
151.                             </td>
152.                         </tr>
153.                         <?php endforeach; ?>
154.                         <tr>
155.                             <td><strong>Загальна сума</strong></td>
156.                             <td></td>
157.                             <td></td>
158.                             <td></td>
159.                             <td><strong>$<?= number_format($total, 2) ?></strong></td>
160.                             <td></td>
161.                         </tr>
162.                     </tbody>
163.                 </table>
164.                 <div class="buttons">
165.                     <form method="POST" action="cart.php">
166.                         <button type="submit" name="cancel">Скасувати</button>
167.                     </form>
168.                     <form method="POST" action="cart.php">
169.                         <button type="submit" name="pay">Оплатити</button>
170.                     </form>
171.                 </div>
172.             </div>
173.         <?php endif; ?>
174.     </main>
175.     <?php include 'footer.phtml'; ?>
176. </body>
177. </html>
#header.php
1. <!DOCTYPE html>
2. <html>
3. <head>
4.     <meta charset="UTF-8">
5.     <title>Simple Shop</title>
6. </head>
7. <body>
8.     <header>
9.     <nav class="nav-flex">
10.         <div class="nav-left">
11.             <a href="index.php">Home</a>
12.         </div>
13.         <div class="nav-center">
14.             <span class="separator">|</span>
15.             <a href="products.php">Products</a>
16.             <span class="separator">|</span>
17.         </div>
18.         <div class="nav-right">
19.             <a href="cart.php">Cart</a>
20.         </div>
21.     </nav>
22. </header>
23. </body>
24. </html>
#footer.php
1. <!DOCTYPE html>
2. <html>
3. <head>
4.     <meta charset="UTF-8">
5. </head>
6. <body>
7.     <footer>
8.     <a href="index.php">Home</a> |
9.     <a href="index.php">Products</a> |
10.    <a href="cart.php">Cart</a> |
11.    <a href="about_us.php">About Us</a>
12.    </footer>
13. </body>
14. </html>
#functions.php
1. <?php
2. 
3. function clearCart() {
4.     $_SESSION['cart'] = [];
5.     return true;
6. }
7. 
8. function redirectTo($url) {
9.     header("Location: $url");
10.    exit();
11. }
12. 
13. function decreaseCartItem($product_id) {
14.    if (isset($_SESSION['cart'][$product_id])) {
15.        $_SESSION['cart'][$product_id]['quantity'] = max(0, (int)$_SESSION['cart'][$product_id]['quantity'] - 1);
16.        if ($_SESSION['cart'][$product_id]['quantity'] === 0) {
17.            unset($_SESSION['cart'][$product_id]);
18.        }
19.        return true;
20.    }
21.    error_log("Failed to decrease quantity for product ID: $product_id - not found in cart");
22.    return false;
23. }
24. 
25. function displayPaymentSuccess($returnUrl) {
26.    ?>
27.    <!DOCTYPE html>
28.    <html lang="uk">
29.    <head>
30.        <meta charset="UTF-8">
31.        <title>Оплата завершена</title>
32.        <style>
33.            body {
34.                display: flex;
35.                justify-content: center;
36.                align-items: center;
37.                height: 100vh;
38.                margin: 0;
39.                background-color: #fff;
40.                flex-direction: column;
41.            }
42.            a {
43.                color: #007bff;
44.                text-decoration: none;
45.                font-size: 18px;
46.            }
47.            a:hover {
48.                text-decoration: underline;
49.            }
50.        </style>
51.    </head>
52.    <body>
53.        <h2>Оплата успішно завершена!</h2>
54.        <p><a href="<?= htmlspecialchars($returnUrl) ?>">Перейти до покупок</a></p>
55.    </body>
56.    </html>
57.    <?php
58.    exit();
59. }
60. ?>
#index.php 
1. <?php
2. session_start();
3. require_once 'products_data.php';
4. 
5. if ($_SERVER['REQUEST_METHOD'] === 'POST') {
6.     if (!isset($_SESSION['cart'])) {
7.         $_SESSION['cart'] = [];
8.     }
9.     $hasSelected = false;
10. 
11.     if (isset($_POST['quantities']) && is_array($_POST['quantities'])) {
12.         foreach ($_POST['quantities'] as $product_id => $quantity) {
13.             $product_id = (int)$product_id;
14.             $quantity = (int)$quantity;
15. 
16.             if ($product_id > 0 && $quantity > 0 && isset($products[$product_id])) {
17.                 $hasSelected = true;
18. 
19.                 if (isset($_SESSION['cart'][$product_id])) {
20.                     $_SESSION['cart'][$product_id]['quantity'] += $quantity;
21.                 } else {
22.                     $_SESSION['cart'][$product_id] = [
23.                         'name' => $products[$product_id]['name'],
24.                         'price' => $products[$product_id]['price'],
25.                         'quantity' => $quantity
26.                     ];
27.                 }
28.             }
29.         }
30.     }
31. 
32.     if ($hasSelected) {
33.         header('Location: cart.php');
34.         exit;
35.     } else {
36.         $error = "Оберіть хоча б один товар із кількістю більше нуля.";
37.     }
38. }
39. ?>
40. 
41. <!DOCTYPE html>
42. <html lang="uk">
43. <head>
44.     <meta charset="UTF-8">
45.     <title>Інтернет-магазин</title>
46.     <link rel="stylesheet" href="style.css">
47.     <style>
48.         .custom-submit-button {
49.             display: block;
50.             margin-left: 1200px;
51.             margin-top: 20px;
52.             padding: 10px 20px;
53.             font-size: 16px;
54.         }
55.     </style>
56. </head>
57. <body>
58.     <?php include 'header.phtml'; ?>
59.     <main>
60.         <h2>Список товарів</h2>
61.         <?php if (isset($error)): ?>
62.             <p class="error"><?= htmlspecialchars($error) ?></p>
63.         <?php endif; ?>
64. 
65.         <form method="POST" action="index.php" id="product-form" class="centered">
66.             <table>
67.                 <thead>
68.                     <tr>
69.                         <th>Назва</th>
70.                         <th>Кількість</th>
71.                         <th>Ціна</th>
72.                     </tr>
73.                 </thead>
74.                 <tbody>
75.                     <?php foreach ($products as $product): ?>
76.                         <tr>
77.                             <td><?= htmlspecialchars($product['name']) ?></td>
78.                             <td>
79.                                 <input type="number" name="quantities[<?= $product['id'] ?>]" value="0" min="0">
80.                             </td>
81.                             <td>$<?= number_format($product['price'], 2) ?></td>
82.                         </tr>
83.                     <?php endforeach; ?>
84.                 </tbody>
85.             </table>
86.         </form>
87.         <button type="button" class="custom-submit-button" onclick="document.getElementById('product-form').submit();">Додати до кошика</button>
88.     </main>
89.     <?php include 'footer.phtml'; ?>
90. </body>
91. </html>
#products_data.php
1. <?php
2. $products = [
3.     1 => [
4.         'id' => 1,
5.         'name' => 'Fanta',
6.         'price' => 1,
7.         'description' => 'Orange flavored carbonated drink'
8.     ],
9.     2 => [
10.        'id' => 2,
11.        'name' => 'Sprite',
12.        'price' => 1,
13.        'description' => 'Clear lemon-lime flavored carbonated drink',
14.    ],
15.    3 => [
16.        'id' => 3,
17.        'name' => 'Nuts',
18.        'price' => 1,
19.        'description' => 'Assorted nuts mix',
20.    ]
21. ];
#style.css
1. body {
2.     font-family: Arial, sans-serif;
3.     margin: 0;
4.     padding-bottom: 60px;
5.     background-color: #f5f5f5;
6. }
7. 
8. .centered {
9.     max-width: 800px;
10.    min-height: 400px;
11.    margin: 0 auto;
12. }
13. 
14. h2 {
15.    text-align: center;
16.    padding-right: 600px;
17. }
18. header, footer { 
19.    background: #333; 
20.    color: white; 
21.    padding: 10px; 
22.    text-align: center; 
23. }
24.         
25. header a, footer a { 
26.    color: white; 
27.    margin: 0 15px; 
28.    text-decoration: none; 
29. }
30. 
31. .nav-flex {
32.    display: flex;
33.    justify-content: space-between;
34.    align-items: center;
35. }
36. 
37. .nav-left, .nav-center, .nav-right {
38.    flex: 1;
39.    text-align: center;
40. }
41. 
42. .nav-left {
43.    text-align: left;
44. }
45. 
46. .nav-right {
47.    text-align: right;
48. }
49. 
50. .separator {
51.    color: white;
52.    margin: 0 120px;
53. }
54. 
55. .container {
56.    max-width: 800px;
57.    margin: 0 auto;
58.    padding: 20px;
59.    background: #fff;
60.    box-shadow: 0 0 10px rgba(0,0,0,0.05);
61. }
62. 
63. table {
64.    width: 100%;
65.    border-collapse: collapse;
66.    margin-top: 20px;
67. }
68. 
69. th, td {
70.    border: 1px solid #ccc;
71.    padding: 10px;
72.    text-align: center;
73. }
74. 
75. th {
76.    background-color: #e9e9e9;
77. }
78. 
79. form {
80.    display: flex;
81.    justify-content: space-between;
82.    margin-top: 20px;
83. }
84. 
85. button {
86.    padding: 10px 20px;
87.    background-color: #2d89ef;
88.    color: white;
89.    border: none;
90.    cursor: pointer;
91.    border-radius: 4px;
92. }
93. 
94. button:hover {
95.    background-color: #1b5fbd;
96. }
97. 
98. footer {
99.    position: fixed;
100.   bottom: 0;
101.   left: 0;
102.   right: 0;
103.   background: #333;
104.   color: #fff;
105.   text-align: center;
106.   padding: 15px;
107. }