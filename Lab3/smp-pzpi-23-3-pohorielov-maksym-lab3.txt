МІНІСТЕРСТВО НАУКИ І ОСВІТИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










Кафедра «Програмна інженерія»








ЗВІТ
з лабораторної роботи №3
з дисципліни «Скриптові мови програмування»
на тему: «Створення Web-застосунків за допомогою PHP»












 
Виконав:                                                                         Прийняв:
ст. гр. ПЗПІ-23-3                                                            ст. викладач кафедри ПІ
Погорєлов М. І.                                                              Сокорчук Ігор Петрович


















Харків 2025
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	21.04.2025
	0.1
	Створено розділ «Завдання»
	2
	22.04.2025
	0.1
	Створено розділ «Опис Виконаної роботи»
	3
	23.04.2025
	0.1
	Створено розділ «Висновки»
	4
	23.04.2025
	0.1
	Створено розділ «Додаток А»
	5
	23.04.2025
	0.1
	Створено розділ «Додаток Б»
	6
	23.04.2025
	0.1
	Створено розділ «Додаток В»
	

















































2 ЗАВДАННЯ
У рамках лабораторної роботи необхідно реалізувати сайт інтернет-магазину. Результатом має стати повноцінний веб-проєкт, який дозволяє користувачу переглядати товари, додавати їх до кошика та переглядати вміст кошика. Такий сайт складається з двох основних сторінок: сторінки товарів та сторінки кошика.
Кожна сторінка повинна мати стандартну структуру, що включає шапку (header), основну частину (тіло сторінки) та підвал (footer). Шапка зазвичай містить елементи навігації або логотип сайту. Основна частина відповідає за виведення контенту, наприклад, списку товарів або вмісту кошика. Підвал, у свою чергу, може містити додаткову інформацію або посилання.
На сторінці товарів потрібно реалізувати відображення списку доступних для покупки найменувань. Біля кожного товару повинна бути можливість вибрати кількість одиниць, яку користувач хоче придбати. Також біля кожного товару має бути кнопка «Купити», натискання на яку відправляє форму методом POST. Ця форма передає дані на сервер, де вони зберігаються у сесії користувача.
Сторінка кошика призначена для виведення обраних користувачем товарів. Вона повинна зчитувати дані із сесії та показувати список товарів, які були додані раніше. Кожен товар у кошику відображається з інформацією про назву, кількість та загальну вартість. У разі, якщо кошик порожній, на сторінці має з’явитися повідомлення з текстом «Перейти до покупок», яке є гіперпосиланням на сторінку товарів.
Таким чином, проєкт передбачає створення простої, але функціональної моделі інтернет-магазину, що забезпечує базову взаємодію користувача з товаром за допомогою сесій.
















3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Опис інженерних рішень
У процесі виконання лабораторної роботи було реалізовано простий сайт інтернет-магазину з використанням мови програмування PHP, HTML та CSS. Основною метою проєкту було створення функціонального веб-додатку, який дозволяє користувачам переглядати доступні товари, додавати їх до кошика, а також переглядати його вміст. Архітектура сайту реалізована за принципом поділу на дві основні сторінки — сторінку товарів (каталог) та сторінку кошика.
Для зберігання даних про вибрані товари було використано механізм PHP-сесій, що дозволяє зберігати інформацію про покупки користувача на стороні сервера без необхідності використання бази даних. Всі форми надсилають дані методом POST, що забезпечує безпечну передачу інформації. Кожен товар містить кнопку «Купити», натискання на яку тригерить додавання відповідного елемента до сесії.
Візуальна структура сайту реалізована з використанням HTML-розмітки, де кожна сторінка містить шапку (header), тіло (основний контент), а також підвал (footer). Стилізація інтерфейсу здійснюється за допомогою CSS. Для розміщення елементів у шапці застосовується гнучкий підхід з використанням Flexbox, що дозволяє розташовувати навігаційні посилання зліва, по центру та справа. Кнопки та елементи сторінки вирівнюються відносно центру або зсувами через margin, padding або transform, з метою досягнення необхідного вигляду.
Сторінка товарів динамічно генерується за допомогою PHP, де кожен елемент виводиться як окрема форма з полем вибору кількості та кнопкою для додавання до кошика. При натисканні відбувається обробка POST-запиту, і сесія оновлюється відповідно. У кошику зчитуються дані з сесії та виводяться у вигляді таблиці, що містить найменування товару, кількість та підсумкову вартість. Якщо кошик порожній — виводиться відповідне повідомлення з пропозицією перейти до каталогу.
Код організовано з урахуванням розділення логіки й представлення: HTML-відповідальний за відображення, тоді як PHP обробляє дані форм, керує сесією та забезпечує динамічність. Це дозволяє легко масштабувати проєкт, додаючи нові сторінки або функціонал, наприклад, авторизацію чи обробку замовлень.


3.2 Розробка скрипта 
3.2.1 Файл products_data.php
Файл products_data.php містить асоціативний масив $products, який зберігає дані про товари, доступні в магазині. Кожен товар представлений унікальним ідентифікатором (id) як ключем масиву, а значення — це асоціативний масив із полями id, name, price та description. Цей файл включається в інші скрипти (наприклад, cart.php) для доступу до даних про товари під час обробки кошика, додавання чи відображення продуктів.
1  <?php
2  $products = [
3      1 => [
4          'id' => 1,
5          'name' => 'Fanta',
6          'price' => 1,
7          'description' => 'Orange flavored carbonated drink'
8      ],
9      2 => [
10         'id' => 2,
11         'name' => 'Sprite',
12         'price' => 1,
13         'description' => 'Clear lemon-lime flavored carbonated drink',
14     ],
15     3 => [
16         'id' => 3,
17         'name' => 'Nuts',
18         'price' => 1,
19         'description' => 'Assorted nuts mix',
20     ]
21 ];
Фрагмент коду з основного сценарію, Додаток В.


3.2.3 Файл header.phtml


Файл header.phtml визначає заголовок (header) для сторінок вашого магазину, включаючи навігаційне меню. Він містить HTML-структуру з метаданими, які дублюють основну структуру сторінки, та навігаційну панель із посиланнями на головну сторінку (index.php), сторінку товарів (products.php) та кошик (cart.php). Файл включається в інші сторінки (наприклад, products.php, cart.php) через <?php include 'header.phtml'; ?> для забезпечення однакового вигляду заголовка на всіх сторінках.
Логічні частини файлу:


3.2.3.1 HTML-структура та метадані

Визначає базову HTML-структуру, включаючи тег <!DOCTYPE html>, мову сторінки (lang не вказано, але зазвичай це uk у вашому проєкті), метадані (charset="UTF-8") та заголовок сторінки (<title>Simple Shop</title>). Ця частина є основою для відображення сторінки, але дублює метадані, які вже є в основних файлах (products.php, cart.php), що може викликати проблеми з валідністю HTML.

1 <!DOCTYPE html>
2 <html>
3 <head>
4     <meta charset="UTF-8">
5     <title>Simple Shop</title>
6 </head>

Фрагмент коду з основного сценарію, Додаток В




3.2.3.2 Відкриття тегу body


Починає тег <body>, який є контейнером для видимого вмісту сторінки. Цей тег закривається в кінці файлу, що може викликати проблеми, оскільки основні файли (products.php, cart.php) також містять власні теги <body>. Це призводить до невалідного HTML, оскільки тег <body> з’являється двічі.
Визначає навігаційну панель (<nav>) з класом nav-flex, яка містить три секції:
   * nav-left: Містить посилання на головну сторінку (index.php).
   * nav-center: Містить посилання на сторінку товарів (products.php), оточене роздільниками (|).
   * nav-right: Містить посилання на кошик (cart.php).
Навігація структурована за допомогою flexbox (імовірно, через стилі в style.css), що забезпечує адаптивне розташування посилань.
Код із нумерацією рядків:

8     <header>
9     <nav class="nav-flex">
10        <div class="nav-left">
11            <a href="index.php">Home</a>
12        </div>
13        <div class="nav-center">
14            <span class="separator">|</span>
15            <a href="products.php">Products</a>
16            <span class="separator">|</span>
17        </div>
18        <div class="nav-right">
19            <a href="cart.php">Cart</a>
20        </div>
21    </nav>
22    </header>
23 </body>

Фрагмент коду з основного сценарію, Додаток В


3.2.4 Файл footer.phtml

       Файл footer.phtml визначає нижню частину (футер) сторінок веб-магазину, містить навігаційні посилання на головну сторінку (index.php), сторінку товарів (products.php), кошик (cart.php) та сторінку "Про нас" (about_us.php). Подібно до header.phtml, він включає повну HTML-структуру (, , , ), що викликає невалідність HTML при включенні в основні файли (products.php, cart.php), які вже мають ці теги. Футер використовує просту розмітку з роздільниками (|) між посиланнями, але не підключає CSS для стилізації.


1. <!DOCTYPE html> 
2. <html> 
3. <head>
4.     <meta charset="UTF-8"> 
5. </head> 
6. <body> 
7.     <footer> 
8.         <a href="index.php">Home</a> | 
9.         <a href="index.php">Products</a> | 
10.         <a href="cart.php">Cart</a> | 
11.         <a href="about_us.php">About Us</a> 
12.     </footer> 
13. </body> 
14. </html> 


Фрагмент коду з основного сценарію, Додаток В


3.2.5 Файл functions.php
Файл functions.php містить набір допоміжних функцій для роботи з кошиком у веб-магазині. Він включає функції для очищення кошика, перенаправлення на іншу сторінку, зменшення кількості товару в кошику та відображення сторінки успішної оплати. Ці функції використовуються в інших скриптах, таких як cart.php, для обробки дій користувача, таких як видалення товарів, скасування замовлення чи завершення оплати.
3.2.5.1 Функція clearCart

Функція clearCart() очищає кошик, встановлюючи масив $_SESSION['cart'] у порожній масив. Вона повертає true, щоб позначити успішне виконання. Використовується для скасування замовлення або після успішної оплати в cart.php.

1  function clearCart() {
2      $_SESSION['cart'] = [];
3      return true;
4  }

Фрагмент коду з основного сценарію, Додаток В
3.2.5.2 Функція redirectTo


Функція redirectTo($url) виконує перенаправлення на вказану URL-адресу, використовуючи заголовок HTTP Location. Після встановлення заголовка викликається exit(), щоб зупинити виконання скрипта. Використовується для перенаправлення після дій, таких як додавання товару до кошика чи його видалення.

5
6  function redirectTo($url) {
7      header("Location: $url");
8      exit();
9  }

Фрагмент коду з основного сценарію, Додаток В


3.2.5.3 Функція decreaseCartItem

Функція decreaseCartItem($product_id) зменшує кількість одиниць товару з вказаним product_id у кошику на 1. Якщо кількість стає 0, товар видаляється з $_SESSION['cart']. У разі відсутності товару в кошику записується помилка в лог і повертається false. Використовується для обробки дії зменшення кількості товару в cart.php.

10
11 function decreaseCartItem($product_id) {
12     if (isset($_SESSION['cart'][$product_id])) {
13         $_SESSION['cart'][$product_id]['quantity'] = max(0, (int)$_SESSION['cart'][$product_id]['quantity'] - 1);
14         if ($_SESSION['cart'][$product_id]['quantity'] === 0) {
15             unset($_SESSION['cart'][$product_id]);
16         }
17         return true;
18     }
19     error_log("Failed to decrease quantity for product ID: $product_id - not found in cart");
20     return false;
21 }







3.2.5.4 Функція displayPaymentSuccess

Функція displayPaymentSuccess($returnUrl) генерує HTML-сторінку, яка відображає повідомлення про успішну оплату та посилання для повернення до покупок. Вона включає вбудований CSS для центрування вмісту та стилізації посилання. Після виведення HTML викликається exit(), щоб зупинити виконання скрипта. Використовується в cart.php після дії "Оплатити".

23 function displayPaymentSuccess($returnUrl) {
24     ?>
25     <!DOCTYPE html>
26     <html lang="uk">
27     <head>
28         <meta charset="UTF-8">
29         <title>Оплата завершена</title>
30         <style>
31             body {
32                 display: flex;
33                 justify-content: center;
34                 align-items: center;
35                 height: 100vh;
36                 margin: 0;
37                 background-color: #fff;
38                 flex-direction: column;
39             }
40             a {
41                 color: #007bff;
42                 text-decoration: none;
43                 font-size: 18px;
44             }
45             a:hover {
46                 text-decoration: underline;
47             }
48         </style>
49     </head>
50     <body>
51         <h2>Оплата успішно завершена!</h2>
52         <p><a href="<?= htmlspecialchars($returnUrl) ?>">Перейти до покупок</a></p>
53     </body>
54     </html>
55     <?php
56     exit();}


Фрагмент коду з основного сценарію, Додаток В


3.2.6 Файл cart.php
Файл cart.php відповідає за відображення та управління кошиком у веб-магазині. Він обробляє додавання товарів до кошика, зменшення кількості товарів, скасування замовлення та завершення оплати. Сторінка відображає таблицю з товарами в кошику, включаючи їх ID, назву, ціну, кількість, суму за кожен товар і загальну суму. Користувач може зменшити кількість товару за допомогою іконки смітника, скасувати замовлення або оплатити товари. Файл включає header.phtml і footer.phtml для консистентного дизайну, а також використовує вбудований CSS для стилізації таблиці та кнопок.
3.2.6.1 Ініціалізація сесії та підключення файлів

       Ініціалізує PHP-сесію для роботи з кошиком ($_SESSION['cart']) та підключає файли products_data.php (масив $products) і functions.php (функції clearCart, redirectTo, decreaseCartItem, displayPaymentSuccess). Ця частина забезпечує доступ до необхідних даних і функцій для обробки запитів.

1  <?php
2  session_start();
3  require_once 'products_data.php';
4  require_once 'functions.php';
5

Фрагмент коду з основного сценарію, Додаток В


3.2.6.2 Обробка додавання товару до кошика

Перевіряє, чи є POST-запит із product_id і quantity. Якщо товар існує в $products, додає його до $_SESSION['cart'] або збільшує кількість, якщо він уже є. У разі невалідного product_id записує помилку в лог. Після виконання перенаправляє на cart.php.

6  if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['product_id'], $_POST['quantity'])) {
7      $product_id = (int)$_POST['product_id'];
8      $quantity = max(1, (int)$_POST['quantity']);
9
10     if (isset($products[$product_id])) {
11         $product = $products[$product_id];
12         if (isset($_SESSION['cart'][$product_id])) {
13             $_SESSION['cart'][$product_id]['quantity'] += $quantity;
14         } else {
15             $_SESSION['cart'][$product_id] = [
16                 'name' => $product['title'],
17                 'price' => (float)$product['price'],
18                 'quantity' => $quantity
19             ];
20         }
21     } else {
22         error_log("Attempted to add invalid product ID: $product_id");
23     }
24     redirectTo('cart.php');
25     exit();
26 }
27

Фрагмент коду з основного сценарію, Додаток В


3.2.6.3 Обробка зменшення кількості товару

Перевіряє POST-запит із action=decrease і product_id. Викликає функцію decreaseCartItem для зменшення кількості товару на 1 (або видалення, якщо кількість стає 0). Записує в лог успішне зменшення та перенаправляє на cart.php.

28 if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'decrease' && isset($_POST['product_id'])) {
29     $product_id = (int)$_POST['product_id'];
30     if (decreaseCartItem($product_id)) {
31         error_log("Decreased quantity for product ID: $product_id");
32         redirectTo('cart.php');
33     }
34     exit();
35 }
36

Фрагмент коду з основного сценарію, Додаток В


3.2.6.4 Обробка скасування та оплати

Обробляє інші POST-запити: скасування кошика (cancel) викликає clearCart для очищення $_SESSION['cart'], а оплата (pay) очищає кошик і відображає сторінку успішної оплати через displayPaymentSuccess. Логує отримані POST-дані для діагностики та перенаправляє на cart.php або сторінку оплати.

37 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
38     error_log("POST data received: " . print_r($_POST, true));
39     if (isset($_POST['cancel'])) {
40         if (clearCart()) {
41             redirectTo('cart.php');
42         }
43     } elseif (isset($_POST['pay'])) {
44         if (clearCart()) {
45             displayPaymentSuccess('index.php');
46         }
47     }
48     exit();
49 }
50 ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.5 HTML-структура сторінки та стилі

Визначає HTML-структуру сторінки з локалізацією (lang="uk"), метаданими (charset="UTF-8"), заголовком (Кошик) і підключенням style.css. Вбудований CSS стилізує контейнер кошика, таблицю, кнопки зменшення кількості (decrease_item) та кнопки дій (cancel, pay). Стилі забезпечують центрування, відступи та форматування таблиці.

51 <!DOCTYPE html>
52 <html lang="uk">
53 <head>
54     <meta charset="UTF-8">
55     <title>Кошик</title>
56     <link rel="stylesheet" href="style.css">
57     <style>
58         .cart-container {
59             max-width: 800px;
60             margin: 0 auto;
61             padding: 20px;
62         }
63         table {
64             width: 100%;
65             border-collapse: collapse;
66             margin-top: 20px;
67         }
68         th, td {
69             border: 1px solid #ddd;
70             padding: 10px;
71             text-align: center;
72         }
73         th {
74             background-color: #f2f2f2;
75         }
76         button[name="decrease_item"] {
77             background: none;
78             border: none;
79             color: #dc3545;
80             cursor: pointer;
81             font-size: 18px;
82         }
83         .buttons {
84             margin-top: 20px;
85             text-align: center;
86         }
87         .buttons form {
88             display: inline-block;
89             margin: 0 10px;
90         }
91         .buttons button {
92             padding: 5px 15px;
93         }
94     </style>
95 </head>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.6 Відкриття тегу body та включення заголовка

Починає тег <body> і включає файл header.phtml, який містить навігаційне меню з посиланнями на головну сторінку (index.php), товари (products.php) та кошик (cart.php). Це забезпечує однаковий вигляд верхньої частини сторінки у всьому проєкті.

96  <body>
97      <?php include 'header.phtml'; ?>

Фрагмент коду з основного сценарію, Додаток В








3.2.6.7 Відкриття основного вмісту та заголовок сторінки

Відкриває тег <main> для основного вмісту сторінки та відображає заголовок <h2>Кошик</h2>, який позначає, що користувач перебуває на сторінці кошика.


98      <main>
99          <h2>Кошик</h2>


Фрагмент коду з основного сценарію, Додаток В


3.2.6.8 Логування даних кошика

       Перевіряє наявність $_SESSION['cart'] і записує його вміст у лог за допомогою error_log. Це допомагає у діагностиці, дозволяючи розробнику перевірити стан кошика під час виконання.

100         <?php
101         if (isset($_SESSION['cart'])) {
102             error_log("Cart data: " . print_r($_SESSION['cart'], true));
103         }
104         ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.9 Відображення повідомлення про порожній кошик

Якщо кошик порожній (empty($_SESSION['cart'])), відображається повідомлення "Кошик порожній" у параграфі з вирівнюванням по центру (style="text-align: center;"). Це інформує користувача, що в кошику немає товарів.

105         <?php if (empty($_SESSION['cart'])): ?>
106             <p style="text-align: center;">Кошик порожній.</p>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.10 Контейнер для таблиці кошика


Якщо кошик не порожній, відкривається <div> із класом cart-container, який обмежує ширину таблиці та додає відступи (стилі визначені у вбудованому CSS). Це забезпечує структуроване відображення таблиці з товарами.

107         <?php else: ?>
108             <div class="cart-container">

Фрагмент коду з основного сценарію, Додаток В
3.2.6.11 Заголовок таблиці
Визначає HTML-таблицю з тегом <table> і її заголовком (<thead>), який містить колонки: ID, Назва, Ціна, Кількість, Сума, Дія. Це формує структуру для відображення товарів у кошику.

109                 <table>
110                     <thead>
111                         <tr>
112                             <th>ID</th>
113                             <th>Назва</th>
114                             <th>Ціна</th>
115                             <th>Кількість</th>
116                             <th>Сума</th>
117                             <th>Дія</th>
118                         </tr>
119                     </thead>


Фрагмент коду з основного сценарію, Додаток В


3.2.6.12 Тіло таблиці та обробка товарів


Відкриває <tbody> і ініціалізує змінну $total для обчислення загальної суми. Цикл foreach перебирає товари в $_SESSION['cart'], перевіряє валідність product_id (чи є числовим і чи існує в $products). Якщо product_id невалідний, видаляє товар із кошика та записує помилку в лог. Для кожного валідного товару витягує дані (name, price, quantity), обчислює суму за товар ($sum) і додає її до $total.

120                     <tbody>
121                         <?php
122                         $total = 0;
123                         foreach ($_SESSION['cart'] as $id => $item):
124                             if (!is_numeric($id) || !isset($products[(int)$id])) {
125                                 error_log("Invalid or missing product ID: $id in cart");
126                                 unset($_SESSION['cart'][$id]);
127                                 continue;
128                             }
129
130                             $product_id = (int)$id;
131                             $name = isset($item['name']) ? $item['name'] : ($products[$product_id]['title'] ?? 'Unknown');
132                             $price = isset($item['price']) ? (float)$item['price'] : ($products[$product_id]['price'] ?? 0.00);
133                             $quantity = isset($item['quantity']) ? (int)$item['quantity'] : 0;
134
135                             $sum = $price * $quantity;
136                             $total += $sum;
137                         ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.13 Відображення рядка товару
Для кожного товару генерується рядок таблиці (<tr>), який містить ID, назву, ціну, кількість, суму та форму з кнопкою зменшення кількості (🗑️). Дані екрануються за допомогою htmlspecialchars для захисту від XSS. Форма відправляє POST-запит із action=decrease для зменшення кількості товару.

138                         <tr>
139                             <td><?= htmlspecialchars((string)$product_id) ?></td>
140                             <td><?= htmlspecialchars($name) ?></td>
141                             <td>$<?= number_format($price, 2) ?></td>
142                             <td><?= $quantity ?></td>
143                             <td>$<?= number_format($sum, 2) ?></td>
144                             <td>
145                                 <form method="POST" action="cart.php">
146                                     <input type="hidden" name="action" value="decrease">
147                                     <input type="hidden" name="product_id" value="<?= $product_id ?>">
148                                     <button type="submit" name="decrease_item">🗑️</button>
149                                 </form>
150                             </td>
151                         </tr>
152                         <?php endforeach; ?>


Фрагмент коду з основного сценарію, Додаток В

3.2.6.14 Відображення загальної суми
Додає рядок у таблицю для відображення загальної суми кошика. Текст "Загальна сума" розміщується в колонці ID, а значення $total (відформатоване до двох знаків після коми) — у колонці Сума. Інші колонки залишаються порожніми.

153                         <tr>
154                             <td><strong>Загальна сума</strong></td>
155                             <td></td>
156                             <td></td>
157                             <td></td>
158                             <td><strong>$<?= number_format($total, 2) ?></strong></td>
159                             <td></td>
160                         </tr>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.15 Фрагмент коду з основного сценарію, Додаток В


Закриття таблиці та контейнера

Закриває теги <tbody>, <table> і <div class="cart-container">, завершуючи відображення таблиці з товарами.

161                     </tbody>
162                 </table>
163                 </div>


Фрагмент коду з основного сценарію, Додаток В

3.2.6.16 Кнопки дій (Скасувати та Оплатити)
Відображає блок <div class="buttons"> із двома формами для дій: "Скасувати" (очищає кошик) та "Оплатити" (очищає кошик і показує сторінку успішної оплати). Форми розміщені в ряд за допомогою стилів (display: inline-block).

164                 <div class="buttons">
165                     <form method="POST" action="cart.php">
166                         <button type="submit" name="cancel">Скасувати</button>
167                     </form>
168                     <form method="POST" action="cart.php">
169                         <button type="submit" name="pay">Оплатити</button>
170                     </form>
171                 </div>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.17 Закриття умовного блоку та основного вмісту

Закриває умовний блок <?php else: ?> (початок на рядку 107) і тег <main>, завершуючи відображення вмісту сторінки.

172             </div>
173         <?php endif; ?>
174     </main>

Фрагмент коду з основного сценарію, Додаток В


3.2.6.18 Включення футера та закриття HTML


Включає файл footer.phtml для відображення нижньої частини сторінки (навігаційні посилання) і закриває теги <body> та <html>, завершуючи сторінку.

175     <?php include 'footer.phtml'; ?>
176 </body>
177 </html>


Фрагмент коду з основного сценарію, Додаток В


3.2.7 Файл index.php
Файл index.php є головною сторінкою веб-магазину, яка відображає список товарів у вигляді таблиці з можливістю вибору кількості для кожного товару та додавання їх до кошика. Він ініціалізує сесію, підключає products_data.php для доступу до масиву $products, обробляє POST-запит для додавання кількох товарів до кошика одночасно та перенаправляє на cart.php. Сторінка включає header.phtml і footer.phtml для консистентного дизайну, відображає повідомлення про помилку, якщо товари не вибрано, і використовує вбудований CSS для стилізації кнопки "Додати до кошика".
3.2.7.1 Ініціалізація сесії та підключення файлів
Ініціалізує PHP-сесію для роботи з кошиком ($_SESSION['cart']) і підключає файл products_data.php, який містить масив $products із даними про товари. Це забезпечує доступ до необхідних даних для обробки запитів і відображення товарів.

2  session_start();
3  require_once 'products_data.php';
4

Фрагмент коду з основного сценарію, Додаток В


3.2.7.2 Обробка POST-запиту для додавання товарів до кошика

Перевіряє, чи є POST-запит, і ініціалізує $_SESSION['cart'], якщо він ще не існує. Перебирає масив $_POST['quantities'], який містить ID товарів і відповідні кількості. Для кожного валідного товару (product_id > 0, quantity > 0, існує в $products) додає його до кошика або збільшує кількість, якщо товар уже є. Якщо хоча б один товар додано, перенаправляє на cart.php. Інакше встановлює повідомлення про помилку.

5  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
6      if (!isset($_SESSION['cart'])) {
7          $_SESSION['cart'] = [];
8      }
9      $hasSelected = false;
10
11     if (isset($_POST['quantities']) && is_array($_POST['quantities'])) {
12         foreach ($_POST['quantities'] as $product_id => $quantity) {
13             $product_id = (int)$product_id;
14             $quantity = (int)$quantity;
15
16             if ($product_id > 0 && $quantity > 0 && isset($products[$product_id])) {
17                 $hasSelected = true;
18
19                 if (isset($_SESSION['cart'][$product_id])) {
20                     $_SESSION['cart'][$product_id]['quantity'] += $quantity;
21                 } else {
22                     $_SESSION['cart'][$product_id] = [
23                         'name' => $products[$product_id]['name'],
24                         'price' => $products[$product_id]['price'],
25                         'quantity' => $quantity
26                     ];
27                 }
28             }
29         }
30     }
31
32     if ($hasSelected) {
33         header('Location: cart.php');
34         exit;
35     } else {
36         $error = "Оберіть хоча б один товар із кількістю більше нуля.";
37     }
38 }
39 ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.3 HTML-структура сторінки та стилі


Визначає HTML-структуру сторінки з локалізацією (lang="uk"), метаданими (charset="UTF-8"), заголовком (Інтернет-магазин) і підключенням style.css. Вбудований CSS стилізує кнопку "Додати до кошика" (custom-submit-button), задаючи відступи та розміри. Ця частина забезпечує базовий макет сторінки.

40 <!DOCTYPE html>
41 <html lang="uk">
42 <head>
43     <meta charset="UTF-8">
44     <title>Інтернет-магазин</title>
45     <link rel="stylesheet" href="style.css">
46     <style>
47         .custom-submit-button {
48             display: block;
49             margin-left: 1200px;
50             margin-top: 20px;
51             padding: 10px 20px;
52             font-size: 16px;
53         }
54     </style>
55 </head>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.4 Відображення заголовка та повідомлення про помилку

Включає header.phtml для навігації, відкриває тег <main> і відображає заголовок <h2>Список товарів</h2>. Якщо встановлена змінна $error, показує повідомлення про помилку (наприклад, "Оберіть хоча б один товар із кількістю більше нуля.") з екрануванням через htmlspecialchars для захисту від XSS.

56 <body>
57     <?php include 'header.phtml'; ?>
58     <main>
59         <h2>Список товарів</h2>
60         <?php if (isset($error)): ?>
61             <p class="error"><?= htmlspecialchars($error) ?></p>
62         <?php endif; ?>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.5 Форма та таблиця товарів

Створює форму з методом POST, яка відправляє дані на index.php. Форма містить таблицю з колонками: Назва, Кількість, Ціна. Для кожного товару з $products генерується рядок із назвою (екранованою через htmlspecialchars), полем введення кількості (quantities[ID]) та ціною, відформатованою до двох знаків після коми. Поле кількості має значення за замовчуванням 0 і мінімальне значення 0.

63         <form method="POST" action="index.php" id="product-form" class="centered">
64             <table>
65                 <thead>
66                     <tr>
67                         <th>Назва</th>
68                         <th>Кількість</th>
69                         <th>Ціна</th>
70                     </tr>
71                 </thead>
72                 <tbody>
73                     <?php foreach ($products as $product): ?>
74                         <tr>
75                             <td><?= htmlspecialchars($product['name']) ?></td>
76                             <td>
77                                 <input type="number" name="quantities[<?= $product['id'] ?>]" value="0" min="0">
78                             </td>
79                             <td>$<?= number_format($product['price'], 2) ?></td>
80                         </tr>
81                     <?php endforeach; ?>
82                 </tbody>
83             </table>
84         </form>

Фрагмент коду з основного сценарію, Додаток В


3.2.7.6 Кнопка "Додати до кошика" та завершення сторінки

Додає кнопку "Додати до кошика" з класом custom-submit-button, яка викликає відправлення форми через JavaScript (onclick="document.getElementById('product-form').submit();"). Кнопка має вбудовані стилі (відступ зліва 1200px, верхній відступ 20px). Завершує сторінку закриттям тегів <main>, включенням footer.phtml і закриттям <body> та <html>.

85         <button type="button" class="custom-submit-button" onclick="document.getElementById('product-form').submit();">Додати до кошика</button>
86     </main>
87     <?php include 'footer.phtml'; ?>
88 </body>
89 </html>


Фрагмент коду з основного сценарію, Додаток В


3.2.8 Файл style.css


3.2.8.1 Глобальні стилі для body

Задає базові стилі для тегу <body>, включаючи шрифт (Arial, sans-serif), нульовий зовнішній відступ, нижній відступ 60px (імовірно, для фіксованого футера), і світло-сірий фон (#f5f5f5). Це забезпечує єдиний вигляд для всіх сторінок.

1  body {
2      font-family: Arial, sans-serif;
3      margin: 0;
4      padding-bottom: 60px;
5      background-color: #f5f5f5;
6  }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.2 Стилі для центрованого контейнера
Визначає клас .centered, який використовується для контейнерів (наприклад, у index.php для форми). Задає максимальну ширину 800px і мінімальну висоту 400px, центруючи контейнер за допомогою margin: 0 auto. Це забезпечує адаптивний макет для вмісту.

7
8  .centered {
9      max-width: 800px;
10     min-height: 400px;
11     margin: 0 auto;
12 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.3 Стилі для заголовка h2
Задає стиль для тегу <h2>, центруючи текст і додаючи правий відступ 600px. Цей відступ може виглядати некоректно на малих екранах, зміщуючи текст занадто вліво.

13
14 h2 {
15     text-align: center;
16     padding-right: 600px;
17 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.4 Стилі для header і footer
Задає стилі для тегів <header> і <footer>, включаючи темно-сірий фон (#333), білий колір тексту, відступи 10px і центрування тексту. Для футера додатково визначено фіксоване позиціонування внизу сторінки (position: fixed), що забезпечує його видимість на всіх сторінках.

18
19 header, footer {
20     background: #333;
21     color: white;
22     padding: 10px;
23     text-align: center;
24 }
...
65 footer {
66     position: fixed;
67     bottom: 0;
68     left: 0;
69     right: 0;
70     background: #333;
71     color: #fff;
72     text-align: center;
73     padding: 15px;
74 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.5 Стилі для посилань у header і footer
Задає стилі для посилань (<a>) у <header> і <footer>, включаючи білий колір, відступи 15px по горизонталі та відсутність підкреслення. Це забезпечує єдиний вигляд навігаційних посилань у header.phtml і footer.phtml.


25
26 header a, footer a {
27     color: white;
28     margin: 0 15px;
29     text-decoration: none;
30 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.6 Стилі для навігації (nav-flex)
Визначає клас .nav-flex для навігаційного меню в header.phtml, використовуючи flexbox для розподілу елементів (justify-content: space-between). Класи .nav-left, .nav-center, .nav-right забезпечують вирівнювання (зліва, по центру, справа), а .separator задає стиль для роздільників (|) у навігації з великими відступами 120px.

31
32 .nav-flex {
33     display: flex;
34     justify-content: space-between;
35     align-items: center;
36 }
37
38 .nav-left, .nav-center, .nav-right {
39     flex: 1;
40     text-align: center;
41 }
42
43 .nav-left {
44     text-align: left;
45 }
46
47 .nav-right {
48     text-align: right;
49 }
50
51 .separator {
52     color: white;
53     margin: 0 120px;
54 }

Фрагмент коду з основного сценарію, Додаток В


3.2.8.7 Стилі для контейнера
Визначає клас .container, який використовується для основного вмісту сторінок (наприклад, у cart.php чи about_us.php). Задає максимальну ширину 800px, білий фон, відступи 20px і легку тінь для естетичного вигляду.


55
56 .container {
57     max-width: 800px;
58     margin: 0 auto;
59     padding: 20px;
60     background: #fff;
61     box-shadow: 0 0 10px rgba(0,0,0,0.05);
62 }


Фрагмент коду з основного сценарію, Додаток В


3.2.8.8 Стилі для таблиць
Задає стилі для таблиць (<table>), включаючи повну ширину, згортання меж, верхній відступ 20px. Колонки (th, td) мають сірі межі (#ccc), відступи 10px і центрування тексту. Заголовки (th) мають світло-сірий фон (#e9e9e9).

63
64 table {
65     width: 100%;
66     border-collapse: collapse;
67     margin-top: 20px;
68 }
69
70 th, td {
71     border: 1px solid #ccc;
72     padding: 10px;
73     text-align: center;
74 }
75
76 th {
77     background-color: #e9e9e9;
78 }
Фрагмент коду з основного сценарію, Додаток В


3.2.8.9 Стилі для форм
Задає стиль для тегу <form>, використовуючи flexbox для розподілу елементів із рівними проміжками (justify-content: space-between) і верхнім відступом 20px. Це застосовується до форм у cart.php чи index.php.

79
80 form {
81     display: flex;
82     justify-content: space-between;
83     margin-top: 20px;
84 }


Фрагмент коду з основного сценарію, Додаток В


3.2.8.10 Стилі для кнопок
Задає стилі для кнопок (<button>), включаючи відступи 10x20px, синій фон (#2d89ef), білий текст, відсутність меж, курсор "pointer" і закруглені кути. При наведенні курсора фон темнішає (#1b5fbd).

85
86 button {
87     padding: 10px 20px;
88     background-color: #2d89ef;
89     color: white;
90     border: none;
91     cursor: pointer;
92     border-radius: 4px;
93 }
94
95 button:hover {
96     background-color: #1b5fbd;
97 }


Фрагмент коду з основного сценарію, Додаток В








































































4 ВИСНОВКИ
У результаті виконання лабораторної роботи було створено базовий веб-магазин, що демонструє засвоєння ключових навичок розробки сайтів за допомогою PHP. Проєкт реалізує основні функції електронної комерції: відображення товарів, роботу з кошиком, обробку дій користувача та представлення довідкової інформації. Для цього використано набір PHP-скриптів (index.php, products.php, cart.php, about_us.php тощо), а також стилізовано інтерфейс за допомогою CSS. Особливу увагу приділено використанню сесій для збереження стану кошика, обробці POST-запитів, модульній структурі коду та винесенню повторюваної логіки у функції. 




















































ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
https://youtu.be/Er3KY29Aroo
00:00 - вступ about.php
00:20 - cart.php
02:40 - footer.phtml
02:50 - functions.php 
03:39 - header.phtml
04:00 - index.php
06:00 - product_data.php
06:30 - демонстарія результату програми
















































ДОДАТОК Б
Графічні матеріали


  

Рис.1 - головна сторінка, сторінка вибору товарів


  

Рис.2 - корзина
  

Рис.3 - товари після видалення з корзини 


  

Рис.4 - сторінка після оплати


















ДОДАТОК В
Програмний код
Програмний код можна подивитись у GitHub репозиторії: https://github.com/NurePohorielovMaksym/smp-pzpi-23-3-pohorielov-maksym/blob/main/Lab3/smp-pzpi-23-3-pohorielov-maksym-lab3/smp-pzpi-23-3-pohorielov-maksym-lab3-code