МІНІСТЕРСТВО НАУКИ І ОСВІТИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










Кафедра «Програмна інженерія»








ЗВІТ
з практичної роботи №1
з дисципліни «Скриптові мови програмування»
на тему: «Bash ялинка»












 
Виконав:                                                                         Прийняв:
ст. гр. ПЗПІ-23-3                                                            ст. викладач кафедри ПІ
Погорєлов М. І.                                                              Сокорчук Ігор Петрович


















Харків 2025


1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	03.03.2025
	0.1
	Створено розділ «Завдання»
	2
	10.03.2025
	0.1
	Створено розділ «Опис Виконаної роботи»
	3
	12.03.2025
	0.1
	Створено розділ «Висновки»
	4
	12.03.2025
	0.1
	Створено розділ «Додаток А»
	5
	12.03.2025
	0.1
	Створено розділ «Додаток Б»
	6
	12.03.2025
	0.1
	Створено розділ «Додаток В»
	

















































2 ЗАВДАННЯ


Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу. Ялинка повинна бути симетричною.Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#».
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу. Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі. Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення. Вказані значення повинні округлятися до потрібних у меншу сторону. Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi  
while ... do ... done  
until ... do ... done  
for ... in .. do ... done  
for ((...)); do ... done  
У скрипті також потрібно використати функцію.












3 ОПИС ВИКОНАНОЇ РОБОТИ


3.1 Мова програмування та інструменти
Скрипт написаний на мові сценаріїв Bash, яка є стандартною для роботи в Unix-подібних системах. Bash обрано через його простоту для обробки текстового виведення, легкість роботи з аргументами командного рядка та вбудовану підтримку арифметичних операцій. Скрипт призначений для виконання в терміналі.
3.2 Розробка скрипта
3.2.1 Обробка вхідних параметрів
Сценарій приймає два параметри командного рядка: загальну висоту ялинки та ширину снігового шару. Для забезпечення коректності введення реалізовано перевірку кількості аргументів та їхньої валідності. Перевірка кількості аргументів виконується наступним фрагментом коду:
28 if [ $# -ne 2 ]; then
29     echo "Помилка: необхідно вказати два параметри — висоту та ширину  30 снігу" >&2
31     exit 1
32 fi
Джерело: Фрагмент коду з основного сценарію, Додаток В.
Валідація параметрів здійснюється за допомогою регулярних виразів для перевірки, що введені значення є додатними цілими числами:
36 if ! [[ "$total_height" =~ ^[0-9]+$ && "$snow_width" =~ ^[0-9]+$ && $total_height -gt 0 && 37 $snow_width -gt 0 ]]; then
38     echo "Помилка: параметри повинні бути додатніми цілими числами" >&2
39     exit 1
40 fi
Джерело: Фрагмент коду з основного сценарію, Додаток В.
3.2.2 Модульна структура
Сценарій побудовано з використанням модульного підходу для підвищення читабельності та полегшення підтримки коду. Основна логіка малювання ярусів ялинки винесена в окрему функцію draw_tier, яка відповідає за генерацію одного ярусу з чергуванням символів * і #. Функція реалізована так:
  3 draw_tier() {
  4     local max_width=$((snow_width - 2))
  5     local start_width=1
  6     local i=0
  7     local char
  8 
  9     while (( start_width <= max_width )); do
 10         if (( i % 2 == 0 )); then
 11             char="*"
 12         else
 13             char="#"
 14         fi
 15 
 16         local padding=$(( (snow_width - start_width) / 2 ))
 17         printf "%*s" $padding ""
 18         for ((j = 0; j < start_width; j++)); do
 19             printf "%s" "$char"
 20         done
 21         echo
 22 
 23         ((start_width += 2))
 24         ((i++))
 25     done
 26 }
Джерело: Фрагмент коду з основного сценарію, Додаток В.
Функція використовує локальні змінні для ізоляції даних, цикл while для поступового збільшення ширини ярусу та команду printf для форматованого виведення з урахуванням відступів, що забезпечує симетричне розташування ярусу.
3.2.3 Формування структури ялинки
Ялинка складається з трьох основних компонентів: ярусів, стовбура та снігового шару. Кожен компонент реалізовано окремо. Яруси генеруються викликом функції draw_tier для кожного ярусу. Кількість ярусів обчислюється на основі доступної висоти, яка визначається як різниця між загальною висотою, висотою стовбура та снігового шару . Стовбур реалізовано з фіксованою висотою два рядки та шириною три символи (###), вирівняними по центру відносно ширини снігу. Наприклад:
 64 for ((i = 0; i < trunk_height; i++)); do
 65     padding=$(( (snow_width - 3) / 2 ))
 66     printf "%*s" $padding ""
 67     echo "###"
 68 done
Джерело: Фрагмент коду з основного сценарію, Додаток В.
Сніговий шар: Формується як суцільна лінія символів “*” заданої ширини  з фіксованою висотою один рядок:
 70 for ((i = 0; i < snow_height; i++)); do
 71     for ((j = 0; j < snow_width; j++)); do
 72         printf "*"
 73     done
 74     echo
 75 done
Джерело: Фрагмент коду з основного сценарію, Додаток В.
3.2.4 Методи обробки даних
Обчислення кількості ярусів - Доступна висота (usable_height) обчислюється як total_height - trunk_height - snow_height. Кількість ярусів (num_tiers) визначається діленням доступної висоти на фіксовану висоту ярусу (tier_height=4. 
 44 usable_height=$((total_height - trunk_height - snow_height))
 46 num_tiers=0
 47 remaining_lines=$((total_height - trunk_height - snow_height))
 48 while (( remaining_lines >= tier_height )); do
 49     ((num_tiers++))
 50     ((remaining_lines -= tier_height))
 51 done
Джерело: Фрагмент коду з основного сценарію, Додаток В.
Центрування елементів - Для вирівнювання ярусів і стовбура використано обчислення відступів (padding) за формулою (snow_width - start_width) / 2, що забезпечує симетричне розташування.
Обмеження ширини ярусів - Максимальна ширина ярусу (max_tier_width) обчислюється як snow_width - 2, щоб ялинка не перевищувала ширину снігового шару, забезпечуючи естетичну пропорційність, приклад: 
3.2.5 Взаємодія програмних компонентів
Основний сценарій відповідає за ініціалізацію, обробку вхідних параметрів, валідацію даних і координацію викликів функції draw_tier та виведення стовбура й снігового шару.
Функція draw_tier Генерує яруси ялинки, передаючи текстове виведення до стандартного потоку виведення через команду printf.
Обробка помилок - у  разі некоректних параметрів (наприклад, від’ємних значень або недостатньої висоти для формування ярусів) сценарій повертає повідомлення про помилку та завершує виконання з кодом 1:
 55 if [ $max_tier_width -lt 1 ] || [ $num_tiers -lt 1 ]; then
 56 echo "Помилка: неможливо побудувати ялинку з вказаними параметрами" >&2
 57     exit 1
 58 fi
Джерело: Фрагмент коду з основного сценарію, Додаток В.
3.2.6 Результати роботи
Приклад виконання наведено нижче на рисунку 1, детальніше див. Додаток Б :
  

Рис. 1 - результат виконання коду 




4 ВИСНОВКИ
Розроблений сценарій забезпечує створення текстового зображення ялинки з урахуванням заданих параметрів висоти та ширини. Використання модульного підходу, ретельної валідації даних і стандартних інструментів Bash дозволило створити надійне, портативне та просте у використанні рішення. Сценарій відповідає вимогам завдання та може бути вдосконалений для розширення функціональності.










































































ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/CuKBsHMbjgM
Хронологічний опис відеозапису:
0:00 - Вступ, опис завдання
0:30 - Опис функцій, коду
3:21 - Тестування програми


































ДОДАТОК Б
Графічні матеріали
  

Рис. 1 - результат виконання коду з задовільними параметрами




  



Рис. 2 - результат виконання коду з незадовільними параметрами








ДОДАТОК В
Програмний код
Програмний код можна подивитись у GitHub репозиторії: https://github.com/NurePohorielovMaksym/smp-pzpi-23-3-pohorielov-maksym/blob/main/Pract1/smp-pzpi-23-3-pohorielov-maksym-pract1/smp-pzpi-23-3-pohorielov-maksym-pract1-code